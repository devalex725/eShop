@page "/customers/{Id:int}"
@attribute [Authorize]
@using Humanizer
@inject ICustomersClient CustomersClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (@customer is null)
{
    if (loadingFailed)
    {
        <MudText Typo="Typo.h3" Class="mb-4">Error when loading customer.</MudText>
    }
    else
    {
        <LoadingIndicator />
    }
}
else
{
<MudText Typo="Typo.h3" Class="mb-4">
    @if (customer.CustomerType == CustomerType.Individual)
    {
        <text>@Id - @customer.FirstName @customer.LastName (@customer.Ssn)</text>
    }
    else if (customer.CustomerType == CustomerType.Organization)
    {
        <text>@Id - @customer.Name (@customer.OrgNo)</text>
    }
</MudText>
    <MudText Typo="Typo.h4">Address</MudText>
    <MudPaper Class="pa-4" Elevation="25">
        @customer.Address.Thoroughfare @customer.Address.Premises @customer.Address.SubPremises<br />
        @customer.Address.PostalCode @customer.Address.Locality<br />
        @customer.Address.SubAdministrativeArea @customer.Address.AdministrativeArea<br />
    </MudPaper>
}

@code 
{
    private CustomerDto? @customer;
    private bool loadingFailed = false;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        loadingFailed = false;

        try
        {
            this.@customer = await CustomersClient.GetCustomerAsync(Id);
        }
        catch (Exception exc)
        {
            loadingFailed = true;
            //await JSHelpers.Alert(exc.Message);
        }
    }
}
