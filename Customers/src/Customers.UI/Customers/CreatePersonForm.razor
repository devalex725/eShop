@inject IPersonsClient PersonsClient
@inject NavigationManager NavigationManager

    <EditForm Model="@this" OnValidSubmit="Submit">
            <ObjectGraphDataAnnotationsValidator />

            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField Label="First Name" Variant="Variant.Outlined" Class="mb-4" @bind-Value="FirstName" For="() => FirstName"></MudTextField>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField Label="Last Name" Variant="Variant.Outlined" Class="mb-4" @bind-Value="LastName" For="() => LastName"></MudTextField>
                </MudItem>
            </MudGrid>

            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField Label="SSN" Variant="Variant.Outlined" Class="mb-4" @bind-Value="SSN" For="() => SSN"></MudTextField>
                </MudItem>
            </MudGrid>

            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField Label="Phone" Variant="Variant.Outlined" Class="mb-4" @bind-Value="Phone" For="() => Phone"></MudTextField>
                </MudItem>

                    <MudItem xs="12" md="6">
                    <MudTextField Label="Phone (Mobile)" Variant="Variant.Outlined" Class="mb-4" @bind-Value="PhoneMobile" For="() => PhoneMobile"></MudTextField>
                </MudItem>
            </MudGrid>

            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField Label="Email" Variant="Variant.Outlined" Class="mb-4" @bind-Value="Email" For="() => Email"></MudTextField>
                </MudItem>
            </MudGrid>

            <MudText Typo="Typo.h4" Class="mb-4 mt-8">Address</MudText>

            <AddressForm Address="Address" />

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">Register</MudButton>
    </EditForm>


@code {
    [Required]
    public string FirstName { get; set; } = null!;

    [Required]
    public string LastName { get; set; } = null!;

    public string? SSN { get; set; }

    public string? Phone { get; set; }

    [Required]
    public string PhoneMobile { get; set; } = null!;

    [Required]
    public string Email { get; set; } = null!;

    [Parameter]
    public AddressFormModel Address { get; set; } = null!;

    private async Task Submit()
    {
        var dto = await PersonsClient.CreatePersonAsync(new CreatePersonDto {
            FirstName = FirstName,
            LastName = LastName,
            Ssn = SSN,
            Phone = Phone,
            PhoneMobile = PhoneMobile,
            Email = Email,
            Address = new Address2Dto()
            {
                Thoroughfare = Address.Thoroughfare,
                Premises = Address.Premises,
                SubPremises = Address.SubPremises,
                PostalCode = Address.PostalCode,
                Locality = Address.Locality,
                SubAdministrativeArea = Address.SubAdministrativeArea,
                AdministrativeArea = Address.AdministrativeArea,
                Country = Address.Country
            }
        });

        NavigationManager.NavigateTo($"/Customers/Persons/{dto.Id}");
    }
}