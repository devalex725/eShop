@page "/items"
@implements IDisposable
@inject IItemsClient ItemsClient
@inject PersistentComponentState ApplicationState
@inject NavigationManager NavigationManager

<SitePageTitle>Items</SitePageTitle>

<div class="container">
    <h1>Items</h1>

    @if (itemResults is not null)
    {
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
            @foreach (var item in itemResults.Items)
            {
                <div class="col">
                    <div class="card shadow-sm">
                        <a href="/items/@item.Id">
                            <img class="bd-placeholder-img card-img-top" width="100%" height="225" src="@item.Image"
                        style="object-fit: contain;" />
                        </a>
                        <div class="card-body">
                            <h5 class="card-title">@item.Name</h5>
                            <p class="card-text">@item.Description</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="btn-group">
                                    <a class="btn btn-sm btn-outline-secondary" href="/items/@item.Id">View</a>
                                </div>
                                <div>
                                    @if (item.HasVariants)
                                    {
                                        <small class="text-muted">
                                            <text>Har flera varianter</text>
                                        </small>
                                    }
                                    else
                                    {
                                        <PriceDisplay Price="@item.Price" CompareAtPrice="@item.CompareAtPrice" />
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <Pagination Class="mt-4" Page="@Page.GetValueOrDefault()" PageCount="@totalPages" PageChanged="OnPageChanged"
        Href="/blog" />
    }
</div>

@code {
    ItemsResultOfItemDto? itemResults;

    int pageSize = 10;
    int totalPages = 0;

    private PersistingComponentStateSubscription persistingSubscription;

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Page { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        if (Page is null)
        {
            Page = 1;
        }

        persistingSubscription =
        ApplicationState.RegisterOnPersisting(PersistItems);

        if (!ApplicationState.TryTakeFromJson<ItemsResultOfItemDto>(
        "itemResults", out var restored))
        {
            string itemGroupId = null; // "c2cd6fdd-e765-4838-9188-76a3c0e5ce5d";

            itemResults = await ItemsClient.GetItemsAsync(itemGroupId, Page.GetValueOrDefault(), pageSize, null, null, null);
        }
        else
        {
            itemResults = restored!;
        }

        if (itemResults.TotalItems < pageSize)
        {
            totalPages = 1;
            return;
        }
        totalPages = (int)Math.Ceiling((double)(itemResults.TotalItems / pageSize));
    }

    private Task PersistItems()
    {
        ApplicationState.PersistAsJson("itemResults", itemResults);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }

    async Task OnPageChanged(int page)
    {
        /*
        Page = page;
        await LoadData();
        StateHasChanged();
        */
    }

}
