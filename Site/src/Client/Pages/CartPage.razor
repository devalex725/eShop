@page "/basket"
@inject ICartsClient CartsClient
@inject NavigationManager NavigationManager

<SitePageTitle>Basket</SitePageTitle>

<div class="container">
    <h1>Basket</h1>

    @if(cart is not null) 
    {
        @if(cart.Items.Any()) 
        {
        <ul class="list-group mb-3">
            @foreach (var cartItem in cart.Items)
            {
                <li class="list-group-item d-flex justify-content-between lh-sm">
                    <div>
                        <h6 class="my-0">@cartItem.Item.Name x @cartItem.Quantity</h6>
                        <small class="text-muted">@cartItem.Item.Description</small>
                        <InputQuantity Class="mt-2" MinValue="0" Value="cartItem.Quantity" ValueChanged="async (v) => await ItemQuantityChanged(cartItem, v)" />
                    </div>
                    <span class="text-muted">@((cartItem.Item.Price * cartItem.Quantity).ToString("c"))</span>
                </li>   
            }
            <li class="list-group-item d-flex justify-content-end">
                <div>
                    <li class="d-flex justify-content-between">
                        <span class="me-5">Total</span>
                        <strong>@cart.Items.Sum(x => x.Quantity * x.Item.Price).ToString("c")</strong>
                    </li>
                    <li class="d-flex justify-content-between mt-2">
                        <small class="me-5">VAT incl.</small>
                        <small>@((cart.Items.Sum(x => x.Quantity * x.Item.Price) * 0.25m).ToString("c"))</small>
                    </li>
                </div>
            </li>
        </ul>

            <div class="d-flex justify-content-end">
                <a class="btn btn-lg btn-primary" href="/checkout">Checkout & Pay</a>
            </div>
        }
        else 
        {
            <p>No items here :(</p>
        }
    }
</div>

@code 
{
    SiteCartDto? cart;

    protected override async Task OnInitializedAsync() 
    {
        cart = await CartsClient.GetCartAsync("test");
    }

    async Task ItemQuantityChanged(SiteCartItemDto cartItem, int newQuantity) 
    {
        if(newQuantity == 0) 
        {
            // Remove
            await CartsClient.RemoveItemFromCartAsync("test", cartItem.Id);
            cart!.Items.Remove(cartItem);
            return;
        }
        await CartsClient.UpdateCartItemQuantityAsync("test", cartItem.Id, newQuantity);
        cartItem.Quantity = newQuantity;
    }
}