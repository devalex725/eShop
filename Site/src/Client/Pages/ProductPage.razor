@page "/items/{groupId}/{id}"
@implements IDisposable
@inject PersistentComponentState ApplicationState
@inject NavigationManager NavigationManager
@inject IItemsClient ItemsClient
@inject ICartsClient CartsClient

<SitePageTitle>Item</SitePageTitle>

<article class="container">
    @if(item is not null) 
    {
        <SitePageTitle>@item.Name</SitePageTitle>

        <HeadContent>
            <meta name="description" content="@item.Description">
            <meta name="keywords" content="">
        </HeadContent>

        <div class="row">
            <div class="col-12 col-md-4 mb-4">
                <div class="card shadow-sm">
                    @if(item.Image is not null) 
                    {
                        <img class="bd-placeholder-img card-img-top" width="100%" height="225" src="@item.Image" style="object-fit: contain;" />
                    }
                    else 
                    {
                        <svg class="bd-placeholder-img card-img-top" width="100%" height="225" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail" preserveAspectRatio="xMidYMid slice" focusable="false"><title>Placeholder</title><rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef" dy=".3em">Thumbnail</text></svg>
                    }
                </div>
            </div>

            <section class="col-12 col-md-8">
                <h1>@item.Name</h1>

                @*<p>@item.Id</p>*@

                <PriceDisplay Price="@item.Price" CompareAtPrice="@item.CompareAtPrice" />

                @if(item.Available is not null) 
                {
                    <p class="text-muted mt-2">@item.Available available</p> 
                }

                <p class="mt-3">@item.Description</p>

                    <div class="d-flex justify-content-start mt-4 mb-2">
                        <div>
                            <InputQuantity MinValue="1" @bind-Value="quantity" />
                        </div>
                        
                        <div>
                            <button type="button" class="btn btn-outline-secondary ms-2 me-2" @onclick="AddItemToCart" @onclick:preventDefault><i class="fa fa-shopping-basket"></i> Add to basket</button>
                            @if (hasAddedToCart)
                            {
                                <a class="btn btn-primary fadeInRight" href="/checkout"><i class="fa fa-shopping-basket"></i> Check out</a>
                            }
                        </div>
                    </div>

                <div class="form">
                @foreach (var itemOptionGroups in itemOptions.GroupBy(x => x.Group?.Name))
                {
                    <h3 class="mt-4">@(itemOptionGroups.Key ?? "Options")</h3>

                    @foreach (var itemOption in itemOptionGroups)
                    {
                        <div class="form-floating mb-3 mt-3">
                            @if(itemOption.OptionType == OptionType.YesOrNo) 
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                                    <label class="form-check-label" for="flexCheckDefault">
                                        @itemOption.Name
                                    </label>
                                </div>
                            }
                            else if(itemOption.OptionType == OptionType.Choice) 
                            {
                                <select class="form-select" aria-label="@itemOption.Name" placeholder="Choose option">
                                    @* <option selected>None</option> *@
                                    @foreach(var value in itemOption.Values) 
                                    {
                                        <option value="@value.Id">@value.Name</option>
                                    }
                                </select>
                                <label for="exampleInputEmail1">@itemOption.Name</label>
                            }
                            else if(itemOption.OptionType == OptionType.NumericalValue) 
                            {           
                                <input type="number" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter value" min="@itemOption.MinNumericalValue" step="1" max="@itemOption.MaxNumericalValue" >
                                <label for="exampleInputEmail1">@itemOption.Name</label>
                            }
                        </div>
                    }
                }
                </div>

                @if(itemAttributes is not null) 
                {
                    @foreach (var itemAttributesGroups in itemAttributes.GroupBy(x => x.Group?.Name))
                    {
                        <h3>@itemAttributesGroups.Key</h3>

                        <table class="table mt-4">
                            <tbody>
                                @foreach (var itemAttribute in itemAttributesGroups.Where(x => !x.ForVariant))
                                {
                                <tr>
                                    <th>@itemAttribute.Name</th>

                                    <td>
                                        @string.Join(", ", itemAttribute.Values.Select(x => x.Name))
                                    </td>
                                </tr>
                                }
                            </tbody>
                        </table>
                    }
                }

                @if(itemAttributes is not null) 
                {
                    <div class="form">
                        @foreach (var itemAttributesGroups in itemAttributes.GroupBy(x => x.Group?.Name))
                        {
                            <h3 class="mt-4">@itemAttributesGroups.Key</h3>

                            @foreach (var itemAttribute in itemAttributesGroups)
                            {
                                @itemAttribute.Name
                            }
                        }
                    </div>
                }

                @if(itemVariantResults is not null) 
                {
                    <ul>
                        @foreach (var itemVariant in itemVariantResults.Items)
                        {
                            <li>@itemVariant.Name</li>
                        }
                    </ul>
                }
            </section>
        </div>
    }
 </article>

@code {
    SiteItemDto? item;
    IEnumerable<OptionDto>? itemOptions;
    IEnumerable<AttributeDto>? itemAttributes;
    ItemsResultOfItemDto? itemVariantResults;

    int quantity = 1;
    bool hasAddedToCart = false;

    private PersistingComponentStateSubscription persistingSubscription;

    [Parameter]
    public string GroupId { get; set; }

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = 
            ApplicationState.RegisterOnPersisting(PersistItems);

        if (!ApplicationState.TryTakeFromJson<SiteItemDto>(
            "item", out var restored))
        {
            item = await ItemsClient.GetItemAsync(Id);
        }
        else
        {
            item = restored!;
        }

        if (!ApplicationState.TryTakeFromJson<IEnumerable<OptionDto>>(
            "itemOptions", out var restored2))
        {
            itemOptions = await ItemsClient.GetItemOptionsAsync(Id);
        }
        else
        {
            itemOptions = restored2!;
        }

        if (!ApplicationState.TryTakeFromJson<IEnumerable<AttributeDto>>(
            "itemAttributes", out var restored3))
        {
            itemAttributes = await ItemsClient.GetItemAttributesAsync(Id);
        }
        else
        {
            itemAttributes = restored3!;
        }

        if (!ApplicationState.TryTakeFromJson<ItemsResultOfItemDto>(
            "itemVariants", out var restored4))
        {
            itemVariantResults = await ItemsClient.GetItemVariantsAsync(Id, 1, 10, null, null, null);
        }
        else
        {
            itemVariantResults = restored4!;
        }
    }

    private Task PersistItems()
    {
        ApplicationState.PersistAsJson("item", item);
        ApplicationState.PersistAsJson("itemOptions", itemOptions);
        ApplicationState.PersistAsJson("itemVariants", itemVariantResults);

        return Task.CompletedTask;
    }

    async Task AddItemToCart() 
    {
        await CartsClient.AddItemToCartAsync("test", new AddCartItemDto() {
            ItemId = item.Id,
            Quantity = quantity
        });

        hasAddedToCart = true;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}
