@page "/groups"
@page "/groups/{groupId}"
@page "/groups/{groupId}/{group2Id}"
@page "/groups/{groupId}/{group2Id}/{group3Id}"
@implements IDisposable
@inject IItemsClient ItemsClient
@inject PersistentComponentState ApplicationState
@inject NavigationManager NavigationManager

<SitePageTitle>Items</SitePageTitle>

<div class="container">
    <h1>@(itemGroup?.Name ?? "Items")</h1>

    @if(subGroups is not null) 
    {
        <div class="mb-3">
            <a href="/groups/@GroupId">
                <h5 style="display: inline-block;">
                    <span class="badge rounded-pill text-bg-secondary me-2">All</span>
                </h5>
            </a>

            @foreach(var group in subGroups) 
            {
                var path = GetPath(group);

                <a href="@path">
                    <h5 style="display: inline-block;">
                        <span class="badge rounded-pill text-bg-@SelectedStyle(path) me-2">@group.Name</span>
                    </h5>
                </a>
            }
        </div>
    }

    @if (itemResults is not null)
    {
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
            @foreach (var item in itemResults.Items)
            {
                <div class="col">
                    <a href="/items/@item.Group.Id/@item.Id" style="all: unset; cursor: pointer;">
                    <div class="card shadow-sm">
                        <img class="bd-placeholder-img card-img-top" width="100%" height="225" src="@item.Image"
                        style="object-fit: contain;" />
                        <div class="card-body">
                            <h5 class="card-title">@item.Name</h5>
                            <p class="card-text">@item.Description</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="btn-group">
                                    @if(item.Available is not null) 
                                    {
                                        <p class="text-muted mt-2">@item.Available available</p> 
                                    }
                                </div>
                                <div>
                                    <PriceDisplay Price="@item.Price" CompareAtPrice="@item.CompareAtPrice" />
                                </div>
                            </div>
                        </div>
                    </div>
                    </a>
                </div>
            }
        </div>

        <Pagination Class="mt-4" Page="@Page.GetValueOrDefault()" PageCount="@totalPages" PageChanged="OnPageChanged"
        Href="/blog" />
    }
</div>

@code {
    ItemGroupDto? itemGroup;
    IEnumerable<ItemGroupDto>? itemGroups;
    IEnumerable<ItemGroupDto>? subGroups;
    ItemsResultOfSiteItemDto? itemResults;

    int pageSize = 10;
    int totalPages = 0;

    private PersistingComponentStateSubscription persistingSubscription;

    [Parameter]
    public string? GroupId { get; set; }

    [Parameter]
    public string? Group2Id { get; set; }

    [Parameter]
    public string? Group3Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Page { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        await LoadData();
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await LoadData();

        StateHasChanged();
    }

    public async Task LoadData() 
    {
        if (Page is null)
        {
            Page = 1;
        }
        
        persistingSubscription =
        ApplicationState.RegisterOnPersisting(PersistItems);

        if (!ApplicationState.TryTakeFromJson<IEnumerable<ItemGroupDto>>(
            "itemGroups", out var restored0))
        {
            itemGroups = await ItemsClient.GetItemGroupsAsync(null, true);
        }
        else
        {
            itemGroups = restored0!;
        }

        if(GroupId is not null) 
        {
            itemGroup = itemGroups.FirstOrDefault(x => x.Id == GroupId);

            subGroups = await ItemsClient.GetItemGroupsAsync(GroupId!, true);
        }
        else 
        {
            itemGroup = null;
        }

        if (!ApplicationState.TryTakeFromJson<ItemsResultOfSiteItemDto>(
            "itemResults", out var restored))
        {
            itemResults = await ItemsClient.GetItemsAsync(GroupId, Group2Id, Group3Id, Page.GetValueOrDefault(), pageSize, null, null, null);
        }
        else
        {
            itemResults = restored!;
        }

        if (itemResults.TotalItems < pageSize)
        {
            totalPages = 1;
            return;
        }

        totalPages = (int)Math.Ceiling((double)(itemResults.TotalItems / pageSize));
    }

    private Task PersistItems()
    {
        ApplicationState.PersistAsJson("itemResults", itemResults);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    async Task OnPageChanged(int page)
    {
        /*
        Page = page;
        await LoadData();
        StateHasChanged();
        */
    }

    private string GetPath(ItemGroupDto group) 
    {
        var str = new System.Text.StringBuilder();

        str.Append("/groups");

        GetPath(str, group);

        return str.ToString();
    }

    private void GetPath(System.Text.StringBuilder sb, ItemGroupDto group) 
    {
        if(group.Parent is not null) 
        {
            GetPath(sb, group.Parent);
        }

        sb.Append($"/{group.Id}");
    }

    public string SelectedStyle(string path) => NavigationManager.Uri.Contains(path) ? "primary" : "secondary";
}
