@using Microsoft.AspNetCore.SignalR.Client;
@inject ICartsClient CartsClient
@inject NavigationManager NavigationManager

<li class="nav-item dropdown">
    <a class="nav-link dropdown-toggle no-toggle" href="basket" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
        <CartDisplay NoOfItems="@(cart?.Items.Sum(x => x.Quantity) ?? 0)" />
    </a>
    <ul class="dropdown-menu" aria-labelledby="navbarDropdown" style="right: 10px; width: 350px">
        @if(cart is not null) 
        {
            if(cart.Items.Any()) 
            {
            <ul class="list-group mb-3 mx-2">
                @foreach (var cartItem in cart.Items)
                {
                    <li class="list-group-item d-flex justify-content-between lh-sm">
                        <div>
                            <h6 class="my-0">@cartItem.Item.Name</h6>
                            <small class="text-muted">@cartItem.Item.Description</small>
                        </div>
                        <span class="text-muted">@((cartItem.Item.Price * cartItem.Quantity).ToString("c"))</span>
                    </li>   
                }
                <li class="list-group-item d-flex justify-content-between">
                <span>Total (USD)</span>
                <strong>@cart.Items.Sum(x => x.Quantity * x.Item.Price).ToString("c")</strong>
                </li>
            </ul>
            <li><a class="dropdown-item" href="basket"><i class="fa fa-shopping-basket me-2" style="color: black !important" /> Manage basket</a></li>
            <li><a class="dropdown-item" href="checkout"><i class="fa fa-credit-card me-2" style="color: black !important" /> Check out & Pay</a></li>
            }
            else 
            {
                <span class="mx-4 my-2">You have not added any items yet :( </span>
            }
        }
    </ul>
</li>

@code 
{
    SiteCartDto? cart;
    HubConnection hubConnection = null!;

    protected override async Task OnInitializedAsync() 
    {
        cart = await CartsClient.GetCartAsync("test");

        await InitHubConnection("Foo");
    }

    async Task InitHubConnection(string clientId)
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{NavigationManager.BaseUri}hubs/cart?clientId={clientId}")
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On("CartUpdated", OnCartUpdated);

            hubConnection.Closed += (error) =>
            {
                if (error is not null)
                {
                    //Snackbar.Add($"{error.Message}", Severity.Error);
                }

                //Snackbar.Add("Connection closed");
                return Task.CompletedTask;
            };

            hubConnection.Reconnected += (error) =>
            {
                //Snackbar.Add("Reconnected");
                return Task.CompletedTask;
            };

            hubConnection.Reconnecting += (error) =>
            {
                //Snackbar.Add("Reconnecting");
                return Task.CompletedTask;
            };

            await hubConnection.StartAsync();

            //Snackbar.Add("Connected");
        }
        catch (Exception exc)
        {
            //Snackbar.Add(exc.Message.ToString(), Severity.Error);
        }
    }

    private async Task OnCartUpdated() 
    {
        cart = await CartsClient.GetCartAsync("test");

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is null)
            return;

        await hubConnection.DisposeAsync();
    }
}