@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavigationManager
@inject CartService CartService
@inject Site.Client.RenderingContext RenderingContext
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService

<a class="nav-link dropdown-toggle no-toggle" href="basket" id="navbarDropdown" role="button" data-bs-toggle="@(DisableDropDown ? string.Empty : "dropdown")" aria-expanded="false">
    <CartDisplay NoOfItems="@(cart?.Items.Sum(x => x.Quantity) ?? 0)" SmallIcon="SmallIcon" />
</a>
@if(!DisableDropDown) 
{
    <ul class="dropdown-menu" aria-labelledby="navbarDropdown" style="right: 10px; width: 350px">
        @if(cart is not null) 
        {
            if(cart.Items.Any()) 
            {
            <ul class="list-group mb-3 mx-2">
                @foreach (var cartItem in cart.Items)
                {
                    <li class="list-group-item d-flex justify-content-between lh-sm">
                        <div>
                            <h6 class="my-0">@cartItem.Item.Name x @cartItem.Quantity</h6>
                            <small class="text-muted">@cartItem.Item.Description</small>
                        </div>
                        <span class="text-muted">@((cartItem.Total).ToString("c"))</span>
                    </li>   
                }
                <li class="list-group-item d-flex justify-content-between">
                <span>Total</span>
                <strong>@cart.Items.Sum(x => x.Total).ToString("c")</strong>
                </li>
            </ul>
            <li><a class="dropdown-item" href="basket"><i class="fa fa-shopping-basket me-2" style="color: black !important" /> Manage basket</a></li>
            <li><a class="dropdown-item" href="checkout"><i class="fa fa-credit-card me-2" style="color: black !important" /> Check out & Pay</a></li>
            }
            else 
            {
                <span class="mx-4 my-2">You have not added any items yet :( </span>
            }
        }
    </ul>
}

@code
{
    SiteCartDto? cart;
    static bool initialized;
    static bool inializing;

    [Parameter]
    public bool SmallIcon { get; set; }

    [Parameter]
    public bool DisableDropDown { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (RenderingContext.IsPrerendering)
            return;
        
        CartService.CartUpdated += OnCartUpdated;

        if (!initialized && !inializing)
        {
            inializing = true;

            var clientId = await LocalStorageService.GetItemAsync<string>("cid");    

            if(!CartService.IsConnected) 
            {
                await CartService.Reload();

                await CartService.Start("https://siko.yourbrand.local:5151/", clientId);
                
                initialized = true;
                inializing = false;
            }
        }
    }

    private async Task OnCartUpdated()
    {
        if (RenderingContext.IsPrerendering)
            return;

        cart = CartService.Cart;

        await InvokeAsync(StateHasChanged);
    }

    public async Task DisposeAsync()
    {
        CartService.CartUpdated -= OnCartUpdated;

        await CartService.Stop();

        initialized = false;
    }
}