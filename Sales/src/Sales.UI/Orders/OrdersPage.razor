@inject IOrdersClient OrdersClient
@inject IOrderStatusesClient OrderStatusesClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@page "/orders"

<PageTitle>Orders</PageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true" Class="mt-4 mb-8">Orders</MudText>

<MudButton Variant="Variant.Filled" Link="/orders/new" Class="mb-2">New order</MudButton>

<MudTable T="OrderDto" @ref="table" ServerData="ServerReload" Hover="true" Elevation="25" Breakpoint="Breakpoint.Sm"
          Loading="@loading" LoadingProgressColor="Color.Info" OnRowClick="async (e) => await GoTo(e.Item)">
    <ToolBarContent>
        @* <MudSelect T="OrderType?" Label="Type" MultiSelection="true" @bind-Value="Type" SelectedValues="selectedTypes" SelectedValuesChanged="OnSelectedTypesChanged" Class="mt-0">
                @foreach (var type in Enum.GetValues<OrderType>())
                {
                    <MudSelectItem T="OrderType?" Value="@type">@Enum.GetName(typeof(OrderType), type)</MudSelectItem>
                }
            </MudSelect> *@
        <MudSpacer />
        <MudSelect T="OrderStatusDto?" Label="Status" MultiSelection="true" @bind-Value="Status" SelectedValues="selectedStatuses" SelectedValuesChanged="OnSelectedValuesChanged" ToStringFunc="(o) => o.Name" Class="mt-0">
            @foreach (var status in orderStatuses)
            {
                <MudSelectItem T="OrderStatusDto?" Value="@status">@status.Name</MudSelectItem>
            }
        </MudSelect>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Id</MudTh>
        @*<MudTh>Type</MudTh>
            <MudTh>Date</MudTh>*@
        <MudTh>Status</MudTh>
        <MudTh>Sub Total</MudTh>
        <MudTh>VAT</MudTh>
        <MudTh>Total</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate Context="order">
        <MudTd DataLabel="Id">@order.OrderNo</MudTd>
        @*<MudTd DataLabel="Type">@order.Type</MudTd>
            <MudTd DataLabel="Date">@order.Date.GetValueOrDefault().ToString("yyyy-MM-dd")</MudTd> *@
        <MudTd DataLabel="Status">@order.Status.Name</MudTd>
        <MudTd DataLabel="Sub Total">@order.SubTotal.FormatCurrency(order.Currency)</MudTd>
        <MudTd DataLabel="VAT">@order.Vat.FormatCurrency(order.Currency)</MudTd>
        <MudTd DataLabel="Total">@order.Total.FormatCurrency(order.Currency)</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Filled.FileDownload" Link="@($"/api/invoicing/orders/{order.OrderNo}/file")" @onclick:stopPropagation />
            @if (order.Status.Id == 1)
            {
                <MudIconButton Icon="@Icons.Filled.Delete" Size="Size.Small" OnClick="async (e) => await DeleteOrder(order)" />
            }
        </MudTd>
    </RowTemplate>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code
{
    MudTable<OrderDto> table;
    bool loading = false;
    OrderStatusDto? Status;
    IEnumerable<OrderStatusDto> orderStatuses = new List<OrderStatusDto>();
    IEnumerable<OrderStatusDto?> selectedStatuses = new List<OrderStatusDto?>();

    protected override async Task OnInitializedAsync() 
    {
        orderStatuses = (await OrderStatusesClient.GetOrderStatusesAsync(1, 100, null, null, null)).Items.ToList();
    }

    private async Task<TableData<OrderDto>> ServerReload(TableState state)
    {
        loading = true;

        try
        {
            var result = await OrdersClient.GetOrdersAsync(selectedStatuses?.Select(x => x.Id), null, null, null, state.Page + 1, state.PageSize, null, null);

            return new TableData<OrderDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        catch { throw; }
        finally
        {
            loading = false;
        }
    }

    public async Task GoTo(OrderDto order)
    {
        NavigationManager.NavigateTo($"/orders/{order.OrderNo}");
    }

    private async Task OnSelectedValuesChanged(IEnumerable<OrderStatusDto?> selectedValues)
    {
        selectedStatuses = selectedValues;
        await table.ReloadServerData();
    }

    private async Task DeleteOrder(OrderDto order)
    {
        var result = await DialogService.ShowMessageBox("Delete draft order", "Are you sure?", "Yes", "No");

        if (!result.GetValueOrDefault())
            return;

        await OrdersClient.DeleteOrderAsync(order.Id);
        await table.ReloadServerData();
    }
}