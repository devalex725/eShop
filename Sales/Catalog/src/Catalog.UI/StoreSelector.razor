@inject IStoreProvider StoreProvider
@inject ISnackbar Snackbar
@implements IDisposable

<MudMenu Dense="true" Color="Color.Inherit" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter"
    PopoverClass="docs-layout-menu-shadow" ListClass="pa-2 docs-menu-list" LockScroll="true">
    <ActivatorContent>
        <MudIconButton Class="me-3"
            Icon="@Icons.Material.Filled.Shop"
            Color="Color.Inherit" Edge="Edge.Start" />
    </ActivatorContent>
    <ChildContent>
        @foreach (var item in items)
        {
            <MudMenuItem @key="@item" OnClick="async () => await StoreProvider.SetCurrentStore(item.Id)">
                <div class="d-flex">
                    <MudIcon Icon="@(currentStore?.Id == item.Id ? Icons.Material.Filled.Check : null)" class="me-2" />
                    <MudText Style="overflow: hidden; white-space: nowrap;">@item.Name</MudText>
                </div>
            </MudMenuItem>   
        }
    </ChildContent>
</MudMenu>

@code {
    IEnumerable<StoreDto> items = Enumerable.Empty<StoreDto>();
    StoreDto? currentStore;

    protected override async Task OnInitializedAsync() 
    {
        StoreProvider.CurrentStoreChanged += OnCurrentStoreChanged;

        items = await StoreProvider.GetAvailableStoresAsync();

        StateHasChanged();
    }

    private void OnCurrentStoreChanged(object? sender, EventArgs e) 
    {
        currentStore = StoreProvider.CurrentStore;

        StateHasChanged();

        Snackbar.Add($"Your store is: {currentStore.Name}");
    }

    public void Dispose() 
    {
        StoreProvider.CurrentStoreChanged -= OnCurrentStoreChanged;
    }
}