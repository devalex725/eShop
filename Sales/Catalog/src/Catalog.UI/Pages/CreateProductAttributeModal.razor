@using System.ComponentModel.DataAnnotations
@inject IProductsClient ProductsClient
@inject IDialogService DialogService

<EditForm Model="@this" OnValidSubmit="OnSubmit">
    <ObjectGraphDataAnnotationsValidator />

    <MudDialog>
        <DialogContent>

            <MudTextField Label="Name" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Name" For="() => Name" />

            <MudTextField Lines="3" Label="Description" Class="mb-6" Variant="Variant.Outlined"
                @bind-Value="Description" For="() => Description" />

            @if (Groups is not null)
            {
                <MudSelect T="AttributeGroupDto" Label="Group" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Group"
                ToStringFunc="x => x?.Name" For="() => Group">
                    @foreach (var item in Groups)
                    {
                        <MudSelectItem Value="@item" />
                    }
                </MudSelect>
            }

            @if(Product.HasVariants) 
            {
                <MudCheckBox Label="For variant" Class="mb-6" @bind-Checked="ForVariant" For="() => ForVariant" />

                @if(ForVariant) 
                {
                    <MudCheckBox Label="Is main attribute" Class="mb-6" @bind-Checked="IsMainAttribute" For="() => IsMainAttribute" />
                }   
            }

            <MudText Typo="Typo.h6" Align="Align.Left" Class="mb-2">Values</MudText>

            <div class="form-group mb-2">
                <MudButton Color="Color.Primary" OnClick="AddValue" StartIcon="@Icons.Material.Filled.Add">Add value
                </MudButton>

                @if (Values.Any())
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var value in Values)
                            {
                                <tr>
                                    <td>
                                        <MudTextField Class="mb-2" Variant="Variant.Outlined" Margin="Margin.Dense"
                                    @bind-Value="value.Name" For="() => value.Name" />
                                    </td>

                                    <td>
                                        <MudIconButton Class="mb-2" Icon="@Icons.Material.Filled.Delete"
                                    OnClick="async () => await DeleteValue(value)" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => Modal.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Create</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    IList<AttributeGroupDto?> Groups { get; set; }

    [CascadingParameter] MudDialogInstance Modal { get; set; }

    [Parameter] public string ProductId { get; set; }

    [Parameter] public ProductDto Product { get; set; }

    [Required]
    public string Name { get; set; }

    public string Description { get; set; }

    public AttributeGroupDto? Group { get; set; }

    public bool ForVariant { get; set; }

    public bool IsMainAttribute { get; set; }

    [ValidateComplexType]
    public List<AttributeValueVM> Values { get; set; } = new List<AttributeValueVM>();

    protected override async Task OnInitializedAsync()
    {
        Groups = (await ProductsClient.GetAttributeGroupsAsync(ProductId)).Prepend(new AttributeGroupDto
        {
            Id = null,
            Name =
        "None"
        }).ToList();
    }

    void AddValue()
    {
        Values.Add(new AttributeValueVM());
    }

    async Task DeleteValue(AttributeValueVM vm)
    {
        var modalResult = await DialogService.ShowMessageBox("Delete the value?", "This cannot be undone.", yesText: "Delete",
        noText: "No");
        if (!modalResult.GetValueOrDefault())
        {
            return;
        }

        Values.Remove(vm);
    }

    async Task OnSubmit()
    {
        var data = new ApiCreateProductAttribute
        {
            Name = Name,
            Description = Description,
            ForVariant = ForVariant,
            IsMainAttribute = IsMainAttribute,
            GroupId = Group?.Id,
            Values = Values.Select(x => new ApiCreateProductAttributeValue()
            {
                Name = x.Name
            }).ToList()
        };

        var result = await ProductsClient.CreateProductAttributeAsync(ProductId, data);
        Modal.Close(DialogResult.Ok(result));
    }

    public class AttributeValueVM
    {
        [Required]
        public string Name { get; set; }
    }
}
