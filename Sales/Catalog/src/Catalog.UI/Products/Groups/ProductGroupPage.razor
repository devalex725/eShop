@page "/products/groups/{*path}"
@implements IDisposable
@inject IProductsClient ProductsClient
@inject IProductGroupsClient ProductGroupsClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IStoreProvider StoreProvider

<AppPageTitle>@(itemGroup is null ? "Product Groups" : itemGroup?.Name)</AppPageTitle>

@if(loading) 
{
    <LoadingIndicator />
}
else 
{
    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-12">@(itemGroup is null ? "Product Groups" : itemGroup?.Name)</MudText>

    <MudGrid Spacing="4" Class="mt-2">
        <MudItem xs="12" sm="5" md="5" lg="3" xl="2">
            @if (productGroupTreeNodes is not null)
            {
                <MudPaper Elevation="25" Class="pa-4">
                    <MudTreeView T="ProductGroupTreeNodeDto"
                    Items="(new HashSet<ProductGroupTreeNodeDto>(productGroupTreeNodes))" Hover="true"
                        SelectedValueChanged="async (e) => await SetGroup(e)">
                        <ItemTemplate>
                            <MudTreeViewItem Items="@(new HashSet<ProductGroupTreeNodeDto>(context.SubGroups))" Value="@context"
                            Text="@context.Name" EndText="@context.ProductsCount.ToString()" EndTextTypo="@Typo.caption" />
                        </ItemTemplate>
                    </MudTreeView>

                    <MudButton Class="mt-4" Size="@Size.Small" StartIcon="@Icons.Material.Filled.Clear"
                    OnClick="async () => { productGroupTreeNode = null; await SetGroup(productGroupTreeNode); itemGroup = null; Path = null; await LoadData(); }">Clear selection
                    </MudButton>
                </MudPaper>
            }
        </MudItem>

        <MudItem xs="12" sm="7" md="7" lg="9" xl="10">
            <MudTable @ref="table" T="ProductGroupDto" ServerData="ServerReload"
                    Dense="true" Hover="true" Elevation="25"
                    OnRowClick="@((e) => NavigationManager.NavigateTo($"/products/groups/{e.Item.Path}"))">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Sub-groups</MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="CreateGroup" StartIcon="@Icons.Material.Filled.Add" Class="my-2">Create group</MudButton>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate Context="group">
                        <MudTd DataLabel="Name">@group.Name</MudTd>
                        <MudTd DataLabel="Description">@group.Description</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async (e) => await UpdateGroup(group)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteGroup(group)" />
                        </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
}

@code
{
    MudTable<ProductGroupDto> table = default!;
    IEnumerable<ProductGroupTreeNodeDto>? productGroupTreeNodes;
    ProductGroupTreeNodeDto? productGroupTreeNode;
    bool loading = false;


    [Parameter]
    public string? Path { get; set; }

    StoreDto? store;
    ProductGroupDto itemGroup;
    List<ProductGroupDto>? itemGroups;

    [Parameter]
    public long? ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        StoreProvider.CurrentStoreChanged += OnCurrentStoreChanged;

        store = StoreProvider.CurrentStore;

        NavigationManager.LocationChanged += OnLocationChanged;

        await LoadData();
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs arg)
    {
        await LoadData();

        StateHasChanged();
    }

    private async void OnCurrentStoreChanged(object? sender, EventArgs e) 
    {
        store = StoreProvider.CurrentStore;

        await LoadData();

        StateHasChanged();
    }

    public void Dispose() 
    {
        StoreProvider.CurrentStoreChanged -= OnCurrentStoreChanged;
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    async Task LoadData() 
    {
        productGroupTreeNodes = await ProductGroupsClient.GetProductGroupsTreeAsync(store?.Id);
        productGroupTreeNode = null;

        if(Path is null) 
        {
            await table.ReloadServerData();        
        }
        else 
        {
            itemGroup = await ProductGroupsClient.GetProductGroupAsync(Path);

            await table.ReloadServerData();        
        }
    }

    async Task CreateGroup()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(CreateProductGroupModal.ParentGroupId), itemGroup?.Id);

        var modalRef = DialogService.Show<CreateProductGroupModal>("Create Group", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        itemGroups.Add((ProductGroupDto)result.Data);
    }

    async Task UpdateGroup(ProductGroupDto itemGroup)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(UpdateProductGroupModal.ProductGroup), itemGroup);

        var modalRef = DialogService.Show<UpdateProductGroupModal>("Update Group", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        var index = itemGroups!.IndexOf(itemGroup);

        itemGroups[index] = (ProductGroupDto)result.Data;
    }

    async Task DeleteGroup(ProductGroupDto itemGroup)
    {
        var modalResult = await DialogService.ShowMessageBox("Delete the group?", "The group will be deleted, but the options will remain.\nThis cannot be undone.", yesText: "Delete", noText: "No");
        if (!modalResult.GetValueOrDefault())
        {
            return;
        }

        await ProductGroupsClient.DeleteProductGroupAsync(itemGroup.Id);

        itemGroups.Remove(itemGroup);
    }

    async Task SetGroup(ProductGroupTreeNodeDto? productGroupTreeNode)
    {
        if (productGroupTreeNode is null) { 
            NavigationManager.NavigateTo($"/products/groups", replace: true);
            return;
        }

        this.productGroupTreeNode = productGroupTreeNode;

        Path = productGroupTreeNode.Path;

        NavigationManager.NavigateTo($"/products/groups/{Path}", replace: true);
    }

    private async Task<TableData<ProductGroupDto>> ServerReload(TableState state)
    {
        store = StoreProvider.CurrentStore;

        var result = await ProductGroupsClient.GetProductGroupsAsync(store.Id, itemGroup?.Id, true, true,
        state.Page, state.PageSize, null, state.SortLabel, state.SortDirection == MudBlazor.SortDirection.Ascending ?
        YourBrand.Catalog.SortDirection.Asc : YourBrand.Catalog.SortDirection.Desc);

        return new TableData<ProductGroupDto>() { TotalItems = result.TotalItems, Items = result.Items };
    }
}

