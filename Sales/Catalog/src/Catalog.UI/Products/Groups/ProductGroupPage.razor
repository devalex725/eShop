@page "/products/groups/{*path}"
@using System.ComponentModel.DataAnnotations
@inject IProductsClient ProductsClient
@inject IProductGroupsClient ProductGroupsClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@implements IDisposable

<AppPageTitle>@itemGroup?.Name</AppPageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" Class="mb-12">@itemGroup?.Name</MudText>

<MudPaper Class="pa-4 mb-8" Elevation="25">
    <EditForm Model="@this" OnValidSubmit="() => {}">

        <MudTextField Label="Name" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Name" For="() => Name" />

        <MudTextField Label="Handle" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Handle" For="() => Handle" />

        <ProductGroupSelector2 Label="Group" @bind-Group="ParentGroup" />

        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Update</MudButton>

    </EditForm>
</MudPaper>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateGroup" StartIcon="@Icons.Material.Filled.Add" Class="my-2">Create group</MudButton>

<MudTable T="ProductGroupDto" Items="itemGroups"
          Dense="true" Hover="true" Elevation="25"
          OnRowClick="@((e) => NavigationManager.NavigateTo($"/products/groups/{e.Item.Path}"))">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Description</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate Context="group">
        <MudTd DataLabel="Name">@group.Name</MudTd>
        <MudTd DataLabel="Description">@group.Description</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await UpdateGroup(group)" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteGroup(group)" />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
</MudTable>

@code
{
    ProductGroupDto? itemGroup;
    List<ProductGroupDto>? itemGroups;

    [Parameter]
    public long? ProductId { get; set; }

    [Parameter]
    public string? Path { get; set; }

    [Required]
    public string Name { get; set; }

    [Required]
    public string? Handle { get; set; }

    public string? Description { get; set; }

    [Required]
    public ProductGroupDto? ParentGroup { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        await LoadData();
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs arg)
    {
        await LoadData();

        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async Task LoadData()
    {
        itemGroup = await ProductGroupsClient.GetProductGroupAsync(Path);

        itemGroups = (await ProductGroupsClient.GetProductGroupsAsync(null, itemGroup.Id, true, true)).ToList();
    }

    async Task CreateGroup()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(CreateProductGroupModal.ParentGroupId), itemGroup.Id);

        var modalRef = DialogService.Show<CreateProductGroupModal>("Create Group", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        itemGroups.Add((ProductGroupDto)result.Data);
    }

    async Task UpdateGroup(ProductGroupDto itemGroup)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(UpdateProductGroupModal.ProductGroup), itemGroup);

        var modalRef = DialogService.Show<UpdateProductGroupModal>("Update Group", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        var index = itemGroups!.IndexOf(itemGroup);

        itemGroups[index] = (ProductGroupDto)result.Data;
    }

    async Task DeleteGroup(ProductGroupDto itemGroup)
    {
        var modalResult = await DialogService.ShowMessageBox("Delete the group?", "The group will be deleted, but the options will remain.\nThis cannot be undone.", yesText: "Delete", noText: "No");
        if (!modalResult.GetValueOrDefault())
        {
            return;
        }

        await ProductGroupsClient.DeleteProductGroupAsync(itemGroup.Id);

        itemGroups.Remove(itemGroup);
    }
}

