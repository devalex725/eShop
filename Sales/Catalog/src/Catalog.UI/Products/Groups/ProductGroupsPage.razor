@page "/products/groups"
@inject IProductsClient ProductsClient
@inject IProductGroupsClient ProductGroupsClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<AppPageTitle>Product Groups</AppPageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" Class="mb-12">Product Groups</MudText>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateGroup" StartIcon="@Icons.Material.Filled.Add" Class="my-2">Create group</MudButton>

<MudTable T="ProductGroupDto" Items="itemGroups"
          Dense="true" Hover="true" Elevation="25">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Description</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate Context="group">
         <a href="@($"/products/groups/{group.Path}")"  style="display:contents;">
            <MudTd DataLabel="Name">@group.Name</MudTd>
            <MudTd DataLabel="Description">@group.Description</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await UpdateGroup(group)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteGroup(group)" />
            </MudTd>
        </a>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
</MudTable>

@code
{
    List<ProductGroupDto>? itemGroups;

    [Parameter]
    public long? ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        itemGroups = (await ProductGroupsClient.GetProductGroupsAsync(null, null, true, true)).ToList();
    }

    async Task CreateGroup()
    {
        DialogParameters parameters = new();

        var modalRef = DialogService.Show<CreateProductGroupModal>("Create Group", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        itemGroups.Add((ProductGroupDto)result.Data);
    }

    async Task UpdateGroup(ProductGroupDto itemGroup)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(UpdateProductGroupModal.ProductGroup), itemGroup);

        var modalRef = DialogService.Show<UpdateProductGroupModal>("Update Group", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        var index = itemGroups!.IndexOf(itemGroup);

        itemGroups[index] = (ProductGroupDto)result.Data;
    }

    async Task DeleteGroup(ProductGroupDto itemGroup)
    {
        var modalResult = await DialogService.ShowMessageBox("Delete the group?", "The group will be deleted, but the options will remain.\nThis cannot be undone.", yesText: "Delete", noText: "No");
        if (!modalResult.GetValueOrDefault())
        {
            return;
        }

        await ProductGroupsClient.DeleteProductGroupAsync(itemGroup.Id);

        itemGroups.Remove(itemGroup);
    }
}

