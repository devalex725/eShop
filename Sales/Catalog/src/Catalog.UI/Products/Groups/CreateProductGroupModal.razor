@using System.ComponentModel.DataAnnotations
@inject IProductsClient ProductsClient
@inject IProductGroupsClient ProductGroupsClient
@inject IDialogService DialogService

<EditForm Model="@this" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <MudDialog>
        <DialogContent>

            <MudTextField Label="Name" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Name" For="() => Name" />

            <MudTextField Label="Handle" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Handle" For="() => Handle" />

                 <div class="d-flex flex-grow-1 mb-4">
                    <div class="flex-1 d-flex">
                        <MudField Label="Parent group" Variant="Variant.Outlined">@(parentGroup is null ? null : GetProductGroup(parentGroup))</MudField>
                    </div>

                    @code
                    {

        string GetProductGroup(ProductGroupDto pg)
        {
            if(pg is null)
            {
                return null;
            }

            if (pg.Parent is null)
            {
                return pg.Name;
            }

            return GetProductGroup(pg.Parent) + " » " + pg.Name;
        }

        string GetProductGroup(ParentProductGroupDto pg)
        {
            if (pg.Parent is null)
            {
                return pg.Name;
            }

            return GetProductGroup(pg.Parent) + " » " + pg.Name;
        }
                }

                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="UpdateGroup" />
            </div>

            <MudTextField Lines="3" Label="Description" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Description" For="() => Description" />

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => Modal.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Create</MudButton>
        </DialogActions>
    </MudDialog>

</EditForm>

@code {
    ProductGroupDto? parentGroup;

    [CascadingParameter] MudDialogInstance Modal { get; set; }

    [Required]
    public string Name { get; set; }
    
    [Required]
    public string? Handle { get; set; }

    public string? Description { get; set; }

    [Parameter] public long ParentGroupId { get; set; }

    async Task OnSubmit()
    {
        ApiCreateProductGroup data = new()
        {
            Name = Name,
            Handle = Handle,
            Description = Description,
            ParentGroupId = parentGroup?.Id ?? ParentGroupId
        };
        var result = await ProductGroupsClient.CreateProductGroupAsync(data);
        Modal.Close(DialogResult.Ok(result));
    }

    async Task UpdateGroup() 
    {
        var dref = DialogService.Show<ProductGroupSelectorModal>();
        var r = await dref.Result;

        if(r.Canceled) return;

        var data = (ProductGroupTreeNodeDto)r.Data;

        parentGroup = await ProductGroupsClient.GetProductGroupAsync(data.Id.ToString());
    }
}

