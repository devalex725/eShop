@page "/products/{productId}"
@inject IProductsClient ProductsClient
@inject IDialogService DialogService

<AppPageTitle>Product</AppPageTitle>

@if (vm is null)
    {
    <YourBrand.Portal.LoadingIndicator />
    }
    else
    {
    <AppPageTitle>@vm.Name (@vm.Id)</AppPageTitle>

    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-12">@vm.Name</MudText>

    <MudGrid Spacing="6">
        <MudItem xs="12" sm="12" md="6" lg="6">
            <div class="card shadow-sm">
                @if ((variant?.Image ?? vm.Image) is not null)
        {
                    <MudImage Src="@(variant?.Image ?? vm.Image)" Alt="Mony the dog" Fluid="true" Elevation="25" Class="rounded-lg" Style="width:100%;" />
        }
        else
        {
                    <svg class="rounded-lg" width="100%" height="225" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail" preserveAspectRatio="xMidYMid slice" focusable="false"><title>Placeholder</title><rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef" dy=".3em">Thumbnail</text></svg>
        }
            </div>
        </MudItem>

        <MudItem xs="12" sm="12" md="6" lg="6">
            <MudCard Elevation="25">
                <MudCardHeader>
                    <MudText Typo="Typo.h5" Align="Align.Center">Details</MudText>
                </MudCardHeader>
                <MudCardContent>

                    <p>@vm.Description</p>

                    <p>@item.Group?.Name</p>

                    @if (vm.Id is not null)
    {
                        <p class="mb-4">Id: @vm.Id</p>
    }

                    @if (vm.Price is not null)
    {
                        <p class="mb-4"> @vm.Price?.ToString("c")</p>
    }

                    @if (vm.Total > 0)
    {
                        <p class="mb-4"> @vm.Total.ToString("c")</p>
    }

                    @if (variant is not null)
    {
                        <MudText Typo="Typo.h6" Align="Align.Left" Class="mb-2">@variant.Description</MudText>

                        @if (variant.Id is not null)
    {
                            <p class="mb-4">Id: @variant.Id</p>
    }

                        <p class="mb-4"> @variant.Price.ToString("c")</p>
    }

                    <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" Link="@($"/products/{ProductId}/edit")" Class="my-2">Edit</MudButton>

                </MudCardContent>
            </MudCard>

            @if (variants is not null)
        {
            <MudGrid>     
                    @foreach(var v in variants)
                    {
                    <MudItem xs="6" sm="6" md="4">
                        <div class="card shadow-sm mt-4" @onclick="() => SelectVariant(v)">
                        @if ((v?.Image ?? vm.Image) is not null)
                        {
                            <MudImage Src="@(v?.Image ?? vm.Image)" Alt="Mony the dog" Fluid="true" Elevation="25" Class="rounded-lg"/>
                        }
                        else
                        {
                            <svg class="rounded-lg" width="100%" height="225" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail" preserveAspectRatio="xMidYMid slice" focusable="false"><title>Placeholder</title><rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef" dy=".3em">Thumbnail</text></svg>
                        }
                        </div>
                    </MudItem>
                    }  
            </MudGrid>
        }

        </MudItem>

            @if (vm.AttributeGroups.Any())
    {
        <MudItem xs="12" sm="12" md="6" lg="6">
                <MudCard Elevation="25">
                    <MudCardContent>

                        <MudText Typo="Typo.h5" Align="Align.Left" Class="mb-4">Attributes</MudText>

                        <EditForm Model="@vm">

                            <MudTable T="AttributeVM" Items="@vm.AttributeGroups.SelectMany(x => x.Attributes).Where(x => !x.ForVariant)"
                                Class="pa-0 m-0"
                                Dense="true" 
                                Hover="false"
                                Striped="true"
                                GroupBy="@_groupDefinition"
                                Elevation="0"
                                GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
                                GroupFooterClass="mb-4">

                                @* <HeaderContent>
                                    <MudTh><MudTableSortLabel SortLabel="nr_field" T="AttributeVM">Name</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortLabel="sign_field" T="AttributeVM"></MudTableSortLabel></MudTh>
                                </HeaderContent> *@

                                <GroupHeaderTemplate Context="c">
                                    @if (!string.IsNullOrEmpty(((AttributeGroupVM?)c.Key)?.Name))
    {
                                        <MudTh Class="mud-table-cell-custom-group" colspan="5"> <MudText Typo="Typo.h6">@($"{((AttributeGroupVM?)c.Key)?.Name}")</MudText></MudTh>
    }
                                </GroupHeaderTemplate>

                                <RowTemplate Context="a">
                                    <MudTd DataLabel="Name"><b>@a.Name</b></MudTd>
                                    <MudTd DataLabel="Id">@string.Join(", ", a.Values.Select(x => x.Name))</MudTd>
                                </RowTemplate>

                                <NoRecordsContent>
                                    <MudText>No matching records found</MudText>
                                </NoRecordsContent>

                                <LoadingContent>
                                    <MudText>Loading...</MudText>
                                </LoadingContent>

                            </MudTable>

                        </EditForm>

                    </MudCardContent>
                </MudCard>
        </MudItem>
    }

            @if (vm.OptionGroups.Any() || vm.AttributeGroups.Any())
    {
                        <MudItem xs="12" sm="12" md="6" lg="6">

                <MudCard Elevation="25">
                    <MudCardContent>

                        <MudText Typo="Typo.h5" Align="Align.Left" Class="mb-4">Options</MudText>

                        <EditForm Model="@vm">
                            @foreach (var attributeGroup in vm.AttributeGroups)
    {
        if (attributeGroup.Name is not null)
        {
                                    <MudText Typo="Typo.h5" Align="Align.Left" Class="mb-4">@attributeGroup.Name</MudText>
        }

                                    @foreach (var attribute in attributeGroup.Attributes.Where(a => a.ForVariant))
    {
        var attributeValues = attribute.Values;

                                                <MudSelect T="AttributeValueVM" Class="mb-6" Label="@(attribute.Name)" Variant="Variant.Outlined" Value="attribute.SelectedValue" ValueChanged="async (e) => { attribute.SelectedValue = e; if (item.HasVariants) { await Update(vm, attribute); }; }" ToStringFunc="x => x.Name">
                                                    @foreach (var item in attributeValues)
                                                    {
                                                        <MudSelectItem Value="@item" />
    }
                                                </MudSelect>

    }
    }

                            @foreach (var optionGroup in vm.OptionGroups)
    {
        if (optionGroup.Name is not null)
        {
                                    <MudText Typo="Typo.h6" Align="Align.Left" Class="mb-4">@optionGroup.Name</MudText>

                                    @if (optionGroup.Max is not null)
    {<small class="mb-2">Max @optionGroup.Max</small>}
        }

                                <div class="form-group mb-6">
                                    @foreach (var option in optionGroup.Options)
    {
        var optionValues = option.Values;

                                        <div>
                                            @if (option.OptionType == OptionType.Choice)
    {
                                                <MudSelect T="OptionValueVM" Dense="true" Class="mb-6" Label="@option.Name" Variant="Variant.Outlined" Value="option.SelectedValue" ValueChanged="async (e) => { option.SelectedValue = e; }" ToStringFunc="x => x.Name">
                                                    @foreach (var item in optionValues)
    {
                                                        <MudSelectItem Value="@item">
                                                            @item.Name
                                                            @if (item.Price is not null)
    {
                                                                <text> (+ @item.Price?.ToString("c"))</text>
    }
                                                        </MudSelectItem>
    }
                                                </MudSelect>
    }
    else if (option.OptionType == OptionType.YesOrNo)
    {
                                                <div class="my-4">
                                                    <MudCheckBox Label="@option.Name" @bind-Checked="option.IsSelected" Disabled="@(optionGroup.Max != null && !option.IsSelected && optionGroup.Options.Count(x => x.IsSelected) == optionGroup.Max)" />
                                                    @if (option.Price is not null)
                                                    {
                                                        <text> (+ @option.Price?.ToString("c"))</text>
    }
                                                </div>
    }
    else if (option.OptionType == OptionType.NumericalValue)
    {
        var max = optionGroup.Max.GetValueOrDefault() - optionGroup.Options.Sum(x => x.NumericalValue);

        Console.WriteLine("{0}: {1}", option.Name, max);

                                                <div class="my-4">
                                                    <MudNumericField Variant="Variant.Outlined" Label="@option.Name" @bind-Value="option.NumericalValue" Max="max" />
                                                </div>
    }
    else if (option.OptionType == OptionType.TextValue)
    {
                                                <div class="my-4">
                                                    <MudTextField Variant="Variant.Outlined" Label="@option.Name" @bind-Value="option.TextValue" />
                                                </div>
    }
                                        </div>
    }

                                </div>
    }

                        </EditForm>

                    </MudCardContent>
                </MudCard>
           </MudItem>
    }
     
    </MudGrid>
    }

@code
{
    private TableGroupDefinition<AttributeVM> _groupDefinition = new()
    {
        GroupName = "Group",
        Indentation = false,
        Expandable = false,
        Selector = (e) => e.Group
    };

    async Task Update(ProductVM item, AttributeVM attribute)
    {
        var selectedAttributes = item.AttributeGroups
           .SelectMany(x => x.Attributes)
           .Where(x => x.ForVariant)
           .Where(x => x.SelectedValue is not null);

        variants = await ProductsClient.FindVariantByAttributeValues2Async(ProductId, selectedAttributes
            .Where(x => !x.IsMainAttribute)
            .ToDictionary(x => x.Id, x => x.SelectedValue!.Id));

        try
        {
            variant = await ProductsClient.FindVariantByAttributeValuesAsync(item.Id, selectedAttributes.ToDictionary(x => x.Id, x => x.SelectedValue!.Id));
        }
        catch (ApiException exc)
        {
            await DialogService.ShowMessageBox("Variant not found", "Could not find a variant for the selected options. Please try again.");
        }
    }

    string Selector(OptionValueVM optionValue)
    {
        return $"{optionValue.Name}{(optionValue.Price is null ? null : $" + {optionValue.Price?.ToString("c")}")}";
    }

    ProductVM? vm = null;

    ProductDto? item;
    IEnumerable<IGrouping<string?, OptionDto>>? optionGroups;
    IEnumerable<IGrouping<string?, ProductAttributeDto>>? attributeGroups;
    IEnumerable<ProductDto>? variants;

    ProductDto? variant;

    Dictionary<string, IEnumerable<OptionValueDto>> optionsValues = new Dictionary<string, IEnumerable<OptionValueDto>>();
    Dictionary<string, IEnumerable<AttributeValueDto>> attributeValues = new Dictionary<string, IEnumerable<AttributeValueDto>>();

    [Parameter]
    public string? ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        item = await ProductsClient.GetProductAsync(ProductId);

        var attributes = await ProductsClient.GetProductAttributesAsync(item.Id);
        attributeGroups = attributes
            .OrderBy(x => x.Attribute.Group?.Id)
            .GroupBy(x => x.Attribute.Group?.Name);

        var options2 = await ProductsClient.GetProductOptionsAsync(item.Id, null);
        optionGroups = options2
            .OrderBy(x => x.Group?.Seq)
            .GroupBy(x => x.Group?.Name);

        vm = new ProductVM()
        {
            Id = item.Id,
            Name = item.Name,
            Image = item.Image,
            Price = item.Price,
            Description = item.Description
        };

        if (attributeGroups is not null)
        {
            foreach (var attributeGroup in attributeGroups)
            {
                AttributeGroupVM groupVm = new()
                {
                    Id = null!,
                    Name = attributeGroup.Key
                };

                if (attributeGroup is null) continue;

                foreach (var attribute in attributeGroup /*.OrderByDescending(x => x.IsMainAttribute) */)
                {
                    AttributeVM attributeVm = new()
                    {
                        Id = attribute.Attribute.Id,
                        Name = attribute.Attribute.Name,
                        //ForVariant = attribute.ForVariant,
                        //IsMainAttribute = attribute.IsMainAttribute
                    };

                    groupVm.Attributes.Add(attributeVm);

                    attributeVm.Group = groupVm;

                    var values = attribute.Attribute.Values;

                    attributeValues[attribute.Attribute.Id] = values;

                    foreach (var value in values.OrderBy(x => x.Seq))
                    {
                        AttributeValueVM optionValueVm = new()
                        {
                            Id = value.Id,
                            Name = value.Name
                        };

                        attributeVm.Values.Add(optionValueVm);
                    }


                    attributeVm.SelectedValue = attributeVm.Values.FirstOrDefault();
                }

                vm.AttributeGroups.Add(groupVm);
            }
        }

        if (optionGroups is not null)
        {
            foreach (var optionGroup in optionGroups)
            {
                OptionGroupVM groupVm = new()
                {
                    Id = null!,
                    Name = optionGroup.Key,
                    Min = optionGroup.ElementAt(0)?.Group?.Min,
                    Max = optionGroup.ElementAt(0)?.Group?.Max
                };

                Console.WriteLine(groupVm.Max);

                if (optionGroup is null) continue;

                foreach (var option in optionGroup)
                {
                    OptionVM optionVm = new()
                    {
                        Id = option.Id,
                        Name = option.Name,
                        OptionType = option.OptionType,
                        Price = option.Price,
                        NumericalValue = option.DefaultNumericalValue.GetValueOrDefault(),
                        TextValue = option.DefaultTextValue
                    };

                    groupVm.Options.Add(optionVm);

                    var values = option.Values;

                    optionsValues[option.Id] = values;

                    foreach (var value in values.OrderBy(x => x.Seq))
                    {
                        OptionValueVM optionValueVm = new()
                        {
                            Id = value.Id,
                            Name = value.Name,
                            Price = value.Price
                        };

                        optionVm.Values.Add(optionValueVm);
                    }

                    if (option.IsSelected)
                    {
                        optionVm.IsSelected = option.IsSelected;
                    }

                    if (option.DefaultValue is not null)
                    {
                        optionVm.SelectedValue = optionVm.Values.FirstOrDefault(x => x.Id == option.DefaultValue.Id);
                    }
                    else
                    {
                        optionVm.SelectedValue = optionVm.Values.FirstOrDefault();
                    }
                }

                vm.OptionGroups.Add(groupVm);
            }
        }

        if (item.HasVariants)
        {
            // INFO: Duplicated 
            var selectedAttributeValues = vm.AttributeGroups
                .SelectMany(x => x.Attributes)
                .Where(x => x.ForVariant)
                .Where(x => !x.IsMainAttribute)
                .Where(x => x.SelectedValue is not null)
                .ToDictionary(x => x.Id, x => x.SelectedValue!.Id);

            variants = await ProductsClient.FindVariantByAttributeValues2Async(item.Id, selectedAttributeValues);

            await Update(vm, null!);
        }
    }

    class ProductVM
    {
        public string Id { get; set; }

        public string Name { get; set; }

        public string? Description { get; set; }

        public string? Image { get; set; }

        public decimal? Price { get; set; }

        public List<AttributeGroupVM> AttributeGroups { get; set; } = new List<AttributeGroupVM>();

        public List<OptionGroupVM> OptionGroups { get; set; } = new List<OptionGroupVM>();

        public decimal Total => Price.GetValueOrDefault()
                + OptionGroups.SelectMany(x => x.Options)
                .Where(x => x.IsSelected || x.SelectedValue is not null)
                .Select(x => x.Price.GetValueOrDefault() + (x?.SelectedValue?.Price ?? 0))
                .Sum();
    }

    class AttributeVM
    {
        public string Id { get; set; }

        public string Name { get; set; }

        public AttributeGroupVM Group { get; set; }

        public List<AttributeValueVM> Values { get; set; } = new List<AttributeValueVM>();

        public bool ForVariant { get; set; }

        public bool IsMainAttribute { get; set; }

        public AttributeValueVM? SelectedValue { get; set; }
    }

    class AttributeGroupVM
    {
        public string Id { get; set; }

        public string? Name { get; set; }

        public List<AttributeVM> Attributes { get; set; } = new List<AttributeVM>();
    }

    class AttributeValueVM
    {
        public string Id { get; set; }

        public string Name { get; set; }
    }

    class OptionVM
    {
        public string Id { get; set; }

        public string Name { get; set; }

        public OptionType OptionType { get; set; }

        public decimal? Price { get; set; }

        public bool IsSelected { get; set; }

        public List<OptionValueVM> Values { get; set; } = new List<OptionValueVM>();

        public OptionValueVM? SelectedValue { get; set; }

        public int NumericalValue { get; set; }

        public string? TextValue { get; set; }
    }

    class OptionGroupVM
    {
        public string Id { get; set; }

        public string? Name { get; set; }

        public int? Min { get; set; }

        public int? Max { get; set; }

        public List<OptionVM> Options { get; set; } = new List<OptionVM>();
    }

    class OptionValueVM
    {
        public string Id { get; set; }

        public string Name { get; set; }

        public decimal? Price { get; set; }
    }

    void Update()
    {
        //vm.Update();
        StateHasChanged();
    }

    void SelectVariant(ProductDto variant)
    {
        if(this.variant.Id == variant.Id) return;

        this.variant = variant;

        var attributes = vm.AttributeGroups.SelectMany(x => x.Attributes);

        foreach (var attr in variant.Attributes)
        {
            var selectedAttr = attributes.First(x => x.Id == attr.Attribute.Id);
            selectedAttr.SelectedValue = selectedAttr.Values.FirstOrDefault(x => x.Id == attr.Value.Id);
        }

        StateHasChanged();
    }
}

