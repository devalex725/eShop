@using System.ComponentModel.DataAnnotations
@inject IProductsClient ProductsClient
@inject IProductGroupsClient ProductGroupsClient
@inject IStoreProvider StoreProvider

<EditForm Model="@this" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <MudDialog DisableSidePadding="true">
        <DialogContent>
            <MudContainer Style="max-height: 300px; overflow-y: scroll">

            <MudTextField Label="Name" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Name" For="() => Name" />

            <MudTextField Label="Handle" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Handle" For="() => Handle" />
            
            <MudTextField Lines="3" Label="Description" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Description" For="() => Description" />

            <YourBrand.Catalog.Brands.BrandSelector Label="Brand" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Brand" For="() => Brand" />

            @if (Groups is not null)
            {
                <YourBrand.Catalog.Products.Groups.ProductGroupSelector2 @bind-Group="Group" />
            }

            <MudCheckBox Label="Has variants" Class="mb-6" @bind-Checked="HasVariants" For="() => HasVariants" />

            @if (!HasVariants)
            {
                <MudNumericField Label="Price" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Price" For="() => Price" />
            }

            </MudContainer>

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => Modal.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Create</MudButton>
        </DialogActions>
    </MudDialog>

</EditForm>

@code 
{
    public IList<ProductGroupDto> Groups { get; set; }

    [CascadingParameter] MudDialogInstance Modal { get; set; }

    [Required]
    public string Name { get; set; }

    public bool HasVariants { get; set; }

    public string? Description { get; set; }

    public ProductGroupDto Group { get; set; }

    public BrandDto? Brand { get; set; }

    [Required]
    public string? Handle { get; set; }

    public decimal? Price { get; set; }

    StoreDto? store;

    protected override async Task OnInitializedAsync()
    {
        store = StoreProvider.CurrentStore;

        var groups = (await ProductGroupsClient.GetProductGroupsAsync(store!.Id, null, true, true, null, null, null, null, null)).Items;
        Groups = groups.ToList();
        Group = groups.First();
    }

    async Task OnSubmit()
    {
        ApiCreateProduct data = new()
        {
            Name = Name,
            Handle = Handle,
            StoreId = store!.Id,
            HasVariants = HasVariants,
            Description = Description,
            GroupId = Group.Id,
            BrandId = Brand?.Id,
            Price = Price
        };

        var result = await ProductsClient.CreateProductAsync(data);
        Modal.Close(DialogResult.Ok(result));
    }
}

