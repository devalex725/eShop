@implements IDisposable
@inject IProductsClient ProductsClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@if (items is null)
{
<LoadingIndicator />
}
else
{
<MudGrid Spacing="6" Class="mb-4">
    @foreach (var item in items)
    {
        <MudItem xs="12" sm="6" md="4" lg="4">
            <a href="/products/@item.Id/edit">
                <MudCard Elevation="25">
                    <MudCardMedia Image="@item.Image" Height="200" />

                    <MudCardContent>
                        <MudText Typo="Typo.h5">@item.Name</MudText>
                        <MudText Typo="Typo.body2">@item.Description</MudText>
                    </MudCardContent>
                    <MudCardActions Class="mx-2 d-flex justify-space-between flex-grow-1 gap-4">
                        <MudText Typo="Typo.body2">
                            @if (item.RegularPrice is not null)
                            {
                                <span class="me-3"
                                    style="text-decoration: line-through; color: gray;">@item.RegularPrice?.ToString("c")
                                </span>
                            }
                            @item.Price.ToString("c")
                        </MudText>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" Href="@($"/products/{item.Id}/edit")">Learn
                            More</MudButton>
                    </MudCardActions>
                </MudCard>
            </a>
        </MudItem>
    }
    </MudGrid>

    <MudPagination Color="Color.Primary" Count="pages" SelectedChanged="OnPageChanged" />
}

@code
{
    IEnumerable<ProductDto>? items = null;
    int pageSize = 9;
    int pages = 0;
    int page = 1;

    [Parameter]
    public string? Path { get; set; }

    [Parameter]
    public string? StoreId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //await OnPageChanged(1);
    }

    public void Dispose()
    {

    }

    async Task OnPageChanged(int page)
    {
        var result = await ProductsClient.GetProductsAsync(StoreId, true, true, Path, page - 1,
        pageSize, null, null, null);
        items = result.Items;

        this.pages = (int)Math.Ceiling((double)result.TotalItems / (double)pageSize);
        this.page = page;
    }

    void ShowProduct(ProductDto item)
    {
        NavigationManager.NavigateTo($"/products/{item.Id}/edit");
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnPageChanged(1);
    }

    /*
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>(nameof(StoreId), out var storeId))
        {
            await OnPageChanged(1);
        }
        else if (parameters.TryGetValue<string>(nameof(Path), out var path))
        {
            await OnPageChanged(1);
        }

        await base.SetParametersAsync(parameters);
    }
    */
}