@implements IDisposable
@inject IProductsClient ProductsClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

            <MudTable T="ProductDto" ServerData="@(new Func<TableState, Task<TableData<ProductDto>>>(ServerReload))"
            Dense="true" Hover="true" @ref="table" OnRowClick="(e) => ShowProduct(e.Item)" Elevation="25">
                @*<ToolBarContent>
                <MudText Typo="Typo.h6">Products</MudText>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent> *@
                <HeaderContent>
                    <MudTh></MudTh>
                    <MudTh>
                        <MudTableSortLabel SortLabel="Id" T="ProductDto">Id</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortLabel="Name" T="ProductDto">Name</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortLabel="Brand" T="ProductDto">Brand</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortLabel="Group" T="ProductDto">Group</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortLabel="HasVariants" T="ProductDto">Has variants</MudTableSortLabel>
                    </MudTh>
                    @*<MudTh>
                <MudTableSortLabel SortLabel="Handle" T="ProductDto">Handle</MudTableSortLabel>
                </MudTh>*@
                    <MudTh>
                        <MudTableSortLabel SortLabel="Price" T="ProductDto">Price</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortLabel="RegularPrice" T="ProductDto">Regular Price</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortLabel="Visibility" T="ProductDto">Visibility</MudTableSortLabel>
                    </MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        @if (context.Image is not null)
                        {
                            <MudImage Src="@context.Image" ObjectFit="ObjectFit.Contain" Alt="Mony the dog" Width="100"
                        Height="100" Elevation="0" Class="rounded-lg" />
                        }
                        @*
                    else
                    {
                    <svg class="rounded-lg" width="120px" height="120" xmlns="http://www.w3.org/2000/svg" role="img"
                    aria-label="Placeholder: Thumbnail" preserveAspectRatio="xMidYMid slice" focusable="false">
                    <title>Placeholder</title>
                    <rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef"
                    dy=".3em">Thumbnail</text>
                    </svg>
                    }
                    *@
                    </MudTd>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Brand">@context.Brand?.Name</MudTd>
                    <MudTd DataLabel="Group">@context.Group?.Name</MudTd>
                    <MudTd DataLabel="Has variants">@(context.HasVariants ? "Yes" : string.Empty)</MudTd>
                        @* <MudTd DataLabel="Handle">@context.Handle</MudTd> *@
                        <MudTd DataLabel="Price">@context.Price?.ToString("c")</MudTd>
                        <MudTd DataLabel="Compare At Price">@context.RegularPrice?.ToString("c")</MudTd>
                        <MudTd DataLabel="Visibility">@context.Visibility</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Send" Class="me-2" Link="@($"/products/{context.Id}")" />
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Link="@($"/products/{context.Id}/edit")" />
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText>No matching records found</MudText>
                    </NoRecordsContent>
                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>

@code
{
    MudTable<ProductDto> table;

    [Parameter]
    public string? Path { get; set; }

    [Parameter]
    public string? StoreId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // if(table is not null)
        //     await table.ReloadServerData();
    }

    public void Dispose()
    {
        
    }

    private async Task<TableData<ProductDto>> ServerReload(TableState state)
    {
        var result = await ProductsClient.GetProductsAsync(StoreId, true, true, Path, state.Page,
        state.PageSize, null, state.SortLabel, state.SortDirection == MudBlazor.SortDirection.Ascending ?
        YourBrand.Catalog.SortDirection.Asc : YourBrand.Catalog.SortDirection.Desc);

        return new TableData<ProductDto>() { TotalItems = result.TotalItems, Items = result.Items };
    }

    async Task CreateProduct()
    {
        var modalRef = DialogService.Show<CreateProductModal>("New Product");

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        var item = (ProductDto)result.Data;

        NavigationManager.NavigateTo($"/products/{item.Id}/edit");
    }

    void ShowProduct(ProductDto item)
    {
        NavigationManager.NavigateTo($"/products/{item.Id}/edit");
    }

    protected override async Task OnParametersSetAsync()
    {
        if(table is not null)
            await table.ReloadServerData();
    }

    /*
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>(nameof(StoreId), out var storeId))
        {
            if(table is not null)
                await table.ReloadServerData();
        }
        else if (parameters.TryGetValue<string>(nameof(Path), out var path))
        {
            if(table is not null)
                await table.ReloadServerData();
        }

        await base.SetParametersAsync(parameters);
    }
    */
}