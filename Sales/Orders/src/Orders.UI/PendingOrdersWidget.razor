@using YourBrand.Portal.Widgets
@inject IOrdersClient OrdersClient
@inject NavigationManager NavigationManager

<MudTable T="OrderDto" @ref="table" ServerData="ServerReload" Hover="true" Elevation="0" Breakpoint="Breakpoint.Sm"
          Loading="@loading" LoadingProgressColor="Color.Info" OnRowClick="async (e) => await GoTo(e.Item)">

    <HeaderContent>
        <MudTh><MudTableSortLabel T="OrderDto" SortLabel="Id">Id</MudTableSortLabel></MudTh>
        @*<MudTh>Type</MudTh>*@
        <MudTh><MudTableSortLabel InitialDirection="MudBlazor.SortDirection.Ascending" T="OrderDto" SortLabel="Date">Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="OrderDto" SortLabel="Status">Status</MudTableSortLabel></MudTh>
        <MudTh>Sub Total</MudTh>
        <MudTh>VAT</MudTh>
        <MudTh><MudTableSortLabel T="OrderDto" SortLabel="Total">Total</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate Context="order">
        <MudTd DataLabel="Id">@order.OrderNo</MudTd>
        @*<MudTd DataLabel="Type">@order.Type</MudTd>*@
        <MudTd DataLabel="Date">@order.Date.ToString("yyyy-MM-dd")</MudTd> 
        <MudTd DataLabel="Status">@order.Status.Name</MudTd>
        <MudTd DataLabel="Sub Total">@order.SubTotal.FormatCurrency(order.Currency)</MudTd>
        <MudTd DataLabel="VAT">@order.Vat.FormatCurrency(order.Currency)</MudTd>
        <MudTd DataLabel="Total">@order.Total.FormatCurrency(order.Currency)</MudTd>
    </RowTemplate>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    CancellationTokenSource cts = new ();

    MudTable<OrderDto> table;
    bool loading = false;

    [CascadingParameter]
    public Widget Widget { get; set; } = default!;

    protected async Task OnInitializedAsync() 
    {
    }

    private async Task<TableData<OrderDto>> ServerReload(TableState state)
    {
        loading = true;

        try
        {
            var result = await OrdersClient.GetOrdersAsync(new int [] { 3 }, null, null, null, state.Page + 1, state.PageSize,
                state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortLabel,
                state.SortDirection == MudBlazor.SortDirection.None ? null : (state.SortDirection == MudBlazor.SortDirection.Ascending ? YourBrand.Orders.SortDirection.Ascending : YourBrand.Orders.SortDirection.Descending), cts.Token);

            Widget.Name = $"Pending orders ({result.TotalItems})";

            return new TableData<OrderDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        catch 
        {
            return new TableData<OrderDto>();
        }
        finally
        {
            loading = false;
        }
    }

    public async Task GoTo(OrderDto order)
    {
        NavigationManager.NavigateTo($"/orders/{order.OrderNo}");
    }
}