@using Microsoft.AspNetCore.SignalR.Client;

@page "/contacts"
@attribute [Authorize]

@inject IContactsClient ContactsClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<AppPageTitle>Contacts</AppPageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true" Class="mt-4 mb-8">Contacts</MudText>

<MudButton Variant="Variant.Filled" OnClick="async () => await OnItemClicked(null)" StartIcon="@Icons.Filled.Add" Color="Color.Default" Class="mb-2 me-2">
    New Contact
</MudButton>

<MudTable T="ContactDto" @ref="table" ServerData="ServerReload" Hover="true" Elevation="25" Breakpoint="Breakpoint.Sm"
    Loading="@loading" LoadingProgressColor="Color.Info" Striped="true" OnRowClick="ItemOnClick">
    
        <ToolBarContent>
            <CampaignsSelector Label="Campaign" Value="Campaign" ValueChanged="OnCampaignChanged" For="() => Campaign"  />

            <MudSpacer />

            <MudTextField T="string" Dense="true" Value="searchString" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Immediate="true" DebounceInterval="200"></MudTextField>
        </ToolBarContent>

     <HeaderContent>
         <MudTh><MudTableSortLabel T="ContactDto" SortLabel="Campaign">Campaign</MudTableSortLabel></MudTh>
         <MudTh><MudTableSortLabel T="ContactDto" SortLabel="FirstName">First Name</MudTableSortLabel></MudTh>
         <MudTh><MudTableSortLabel T="ContactDto" SortLabel="LastName">Last Name</MudTableSortLabel></MudTh>
         <MudTh><MudTableSortLabel T="ContactDto" SortLabel="SSN">SSN</MudTableSortLabel></MudTh>
         <MudTh><MudTableSortLabel T="ContactDto" SortLabel="Phone">Phone</MudTableSortLabel></MudTh>
         <MudTh><MudTableSortLabel T="ContactDto" SortLabel="PhoneMobile">Phone (Mobile)</MudTableSortLabel></MudTh>
         <MudTh><MudTableSortLabel T="ContactDto" SortLabel="Email">Email</MudTableSortLabel></MudTh>
         <MudTh>Address</MudTh>
     </HeaderContent>
     <RowTemplate Context="contact">
         <MudTd DataLabel="Campaign">@contact.Campaign?.Name</MudTd>
         <MudTd DataLabel="FirstName">@contact.FirstName</MudTd>
         <MudTd DataLabel="LastName">@contact.LastName</MudTd>
         <MudTd DataLabel="SSN">@contact.Ssn</MudTd>
         <MudTd DataLabel="Phone">@contact.Phone</MudTd>
         <MudTd DataLabel="Phone (Mobile)">@contact.PhoneMobile</MudTd>
         <MudTd DataLabel="Email">@contact.Email</MudTd>
         <MudTd DataLabel="Address">
            @contact.Address?.Thoroughfare @contact.Address?.SubPremises, @contact.Address?.Premises @contact.Address?.PostalCode @contact.Address?.Locality @contact.Address?.SubAdministrativeArea @contact.Address?.AdministrativeArea @contact.Address?.Country</MudTd>
     </RowTemplate>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code
{
    MudTable<ContactDto> table = null!;
    bool loading = false;
    string? searchString;

    CampaignDto Campaign { get; set; }

    private async Task<TableData<ContactDto>> ServerReload(TableState state)
    {
        loading = true;

        try
        {
            var result = await ContactsClient.GetContactsAsync(state.Page, state.PageSize, Campaign?.Id, searchString, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : (state.SortDirection == MudBlazor.SortDirection.Ascending ? YourBrand.Marketing.SortDirection.Asc : YourBrand.Marketing.SortDirection.Desc));

            return new TableData<ContactDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            loading = false;
        }
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task OnCampaignChanged(CampaignDto sa)
    {
        Campaign = sa;
        table.ReloadServerData();
    }

    private async Task ItemOnClick(TableRowClickEventArgs<ContactDto> ev)
    {
        var item = ev.Item;

        await OnItemClicked(item);
    }

    async Task OnItemClicked(ContactDto? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(ContactDialog.Id), dto?.Id);

            var dialogReference = DialogService.Show<ContactDialog>(dto is null ? "New Contact" : $"Update {dto.FirstName}", parameters, new DialogOptions {
                //FullScreen = true,
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Cancelled)
                return;

            await table.ReloadServerData();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private TableData<ContactDto>? GetTableData()
    {
        return (TableData<ContactDto>?)table?.GetType()?
            .GetField("_server_data", System.Reflection.BindingFlags.NonPublic |
                         System.Reflection.BindingFlags.Instance)?
            .GetValue(table);
    }
}