@using YourBrand.Portal.Theming
@using YourBrand.Portal.Localization
@using YourBrand.Portal.Authentication
@implements IDisposable
@inject IDialogService DialogService
@inject IThemeManager ThemeManager
@inject IStringLocalizer<AppBar> T

<MudAppBar Elevation="25" Dense="true">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                   OnClick="@(async (e) => await DrawerToggleCallback.InvokeAsync())" />
                   @*
    <a href="/">
        <img style="height: 30px; width: auto;" class="mt-1" src="logo.svg" />
    </a>
                   *@
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudText Typo="Typo.h5" Class="ms-2"><b>@T["AppTitle"]</b></MudText>
    </MudHidden>
    <MudSpacer />
    <AppBarTray />
    <MudMenu Dense="true" Color="Color.Inherit" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter"
             PopoverClass="docs-layout-menu-shadow" ListClass="pa-2 docs-menu-list" LockScroll="true">
        <ActivatorContent>
            <MudIconButton Class="me-3" Icon="@(_currentColorScheme == ColorScheme.Light ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" Color="Color.Inherit" Edge="Edge.Start" />
        </ActivatorContent>
        <ChildContent>
            <MudMenuItem OnClick="@(async (e) => ThemeManager.SetPreferredColorScheme(ColorScheme.Light))">
                <div class="d-flex">
                    <MudIcon Icon="@Icons.Material.Filled.LightMode" class="me-2" />
                    <MudText Style="overflow: hidden; white-space: nowrap;">@T["Light"]</MudText>
                    @if (ThemeManager.PreferredColorScheme is not null
                      && ThemeManager.CurrentColorScheme == ColorScheme.Light)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" class="ms-2" />
                    }
                </div>
            </MudMenuItem>
            <MudMenuItem OnClick="@(async (e) => ThemeManager.SetPreferredColorScheme(ColorScheme.Dark))">
                <div class="d-flex">
                    <MudIcon Icon="@Icons.Material.Filled.DarkMode" class="me-2" />
                    <MudText Style="overflow: hidden; white-space: nowrap;">@T["Dark"]</MudText>
                    @if (ThemeManager.PreferredColorScheme is not null
                      && ThemeManager.CurrentColorScheme == ColorScheme.Dark)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" class="ms-2" />
                    }
                </div>
            </MudMenuItem>
            <MudMenuItem OnClick="(e) => ThemeManager.UseSystemScheme()">
                <div class="d-flex">
                    <MudIcon Icon="@Icons.Material.Filled.Settings" class="me-2" />
                    <MudText Style="overflow: hidden; white-space: nowrap;">@T["System"]</MudText>
                    @if (ThemeManager.PreferredColorScheme is null)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" class="ms-2" />
                    }
                </div>
            </MudMenuItem>
        </ChildContent>
    </MudMenu>
    <LoginDisplay />
    <MudMenu Dense="true" Color="Color.Inherit" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter"
             PopoverClass="docs-layout-menu-shadow" ListClass="pa-2 docs-menu-list" LockScroll="true">
        <ActivatorContent>
            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" Class="me-2" />
        </ActivatorContent>
        <ChildContent>
            <MudMenuItem OnClick="ChangeLocale">
                <div class="d-flex">
                    <MudIcon Icon="@Icons.Material.Filled.Language" class="me-2" />
                    <MudText Style="overflow: hidden; white-space: nowrap;">@T["ChangeLocale"]</MudText>
                </div>
            </MudMenuItem>
        </ChildContent>
    </MudMenu>
</MudAppBar>

@code {
    ColorScheme? _currentColorScheme;
    private DialogOptions _dialogOptions = new()
    {
        Position = DialogPosition.TopCenter,
        MaxWidth = MaxWidth.Medium,
        NoHeader
    = true
    };

    [Parameter]
    public EventCallback DrawerToggleCallback { get; set; }

    protected override void OnInitialized()
    {
        ThemeManager.ColorSchemeChanged += OnColorSchemeChanged;
        _currentColorScheme = ThemeManager.CurrentColorScheme;
    }

    private void OnColorSchemeChanged(object? sender, ColorSchemeChangedEventArgs e)
    {
        _currentColorScheme = e.ColorScheme;

        StateHasChanged();
    }

    async Task ChangeLocale()
    {
        var dialogRef = DialogService.Show<CultureSelector>(T["ChangeLocale"]);
        await dialogRef.Result;
    }

    public void Dispose() 
    {

    }
}