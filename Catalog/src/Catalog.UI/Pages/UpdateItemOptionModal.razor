@using System.ComponentModel.DataAnnotations
@inject IItemsClient ItemsClient
@inject IDialogService DialogService

<EditForm Model="@this" OnValidSubmit="OnSubmit">
    <ObjectGraphDataAnnotationsValidator />

    <MudDialog>
        <DialogContent>

            <MudTextField Label="Name" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Name" For="() => Name" />

            <MudTextField Lines="3" Label="Description" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Description" For="() => Description" />

            <MudSelect Label="Option Type" Variant="Variant.Outlined" Class="mb-6" @bind-Value="OptionType" For="() => OptionType">
                @foreach(var optionType in Enum.GetValues<OptionType>())
                {
                    <MudSelectItem Value="@optionType">@Enum.GetName(typeof(OptionType), optionType)</MudSelectItem>
                }     
            </MudSelect>

            @if (Groups is not null)
            {
                <MudSelect T="OptionGroupDto" Label="Group" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Group" ToStringFunc="x => x?.Name"
                           For="() => Group">
                    @foreach (var item in Groups)
                    {
                        <MudSelectItem Value="@item" />
                    }
                </MudSelect>
            }

            @if (OptionType == OptionType.YesOrNo)
            {
                <MudTextField Label="Id" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Id" For="() => Id" />

                <MudNumericField Label="Price" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Price" For="() => Price" />

                <MudCheckBox Label="Is selected" Class="mb-6" Variant="Variant.Outlined" @bind-Checked="IsSelected" For="() => IsSelected" />
            }

            @if (OptionType == OptionType.Choice)
            {
                <MudText Typo="Typo.h6" Align="Align.Left" Class="mb-2">Values</MudText>

                <div class="form-group mb-2">

                    <MudButton Color="Color.Primary" OnClick="AddValue" StartIcon="@Icons.Material.Filled.Add">Add value</MudButton>

                    @if (Values.Any())
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Id</th>
                                    <th>Price</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var value in Values)
                                {
                                    <tr>
                                        <td>
                                            <MudTextField Class="mb-2" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="value.Name" For="() => value.Name" />
                                        </td>

                                        <td>
                                            <MudTextField Class="mb-2" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="value.Id" For="() => value.Id" />
                                        </td>

                                        <td>
                                            <MudNumericField Class="mb-2" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="value.Price" For="() => value.Price" />
                                        </td>

                                        <td>
                                            <MudIconButton Class="mb-2" Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteValue(value)" />
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>

                <MudSelect T="OptionValueVM" Label="Default value" Class="mb-6" Variant="Variant.Outlined" @bind-Value="SelectedValue" ToStringFunc="x => x?.Name"
                           For="() => SelectedValue">
                    @foreach (var value in Values)
                    {
                        <MudSelectItem Value="@value">@value.Name</MudSelectItem>
                    }
                </MudSelect>
            }

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => Modal.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Save</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    IList<OptionGroupDto?> Groups { get; set; }

    [CascadingParameter] MudDialogInstance Modal { get; set; }

    [Parameter] public string ItemId { get; set; }

    [Parameter] public OptionDto Option { get; set; }

    [Parameter] public ItemDto Item { get; set; }

    [Required]
    public string Name { get; set; }

    public OptionType OptionType { get; set; }

    public string Description { get; set; }

    public OptionGroupDto? Group { get; set; }

    public bool IsSelected { get; set; }

    public string? Id { get; set; }

    public decimal? Price { get; set; }

    [ValidateComplexType]
    public List<OptionValueVM> Values { get; set; } = new List<OptionValueVM>();

    public OptionValueVM? SelectedValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Groups = (await ItemsClient.GetOptionGroupsAsync(ItemId)).Prepend(new OptionGroupDto { Id = null, Name = "None" }).ToList();

        Name = Option.Name;
        Description = Option.Description;
        Group = Groups.FirstOrDefault(x => x?.Id == Option.Group?.Id);
        IsSelected = Option.IsSelected;
        Price = Option.Price;
        Id = Option.Id;
        OptionType = Option.OptionType;

        foreach (var value in Option.Values)
        {
            Values.Add(new OptionValueVM()
            {
                Id = value.Id,
                Name = value.Name,
                Price = value.Price,
                ItemId = value.ItemId
            });
        }

        SelectedValue = Values.FirstOrDefault(x => x.Id == Option.DefaultValue?.Id);
    }

    void AddValue()
    {
        Values.Add(new OptionValueVM());
    }


    async Task DeleteValue(OptionValueVM vm)
    {
        var modalResult = await DialogService.ShowMessageBox("Delete the value?", "This cannot be undone.", yesText: "Delete", noText: "No");
        if (!modalResult.GetValueOrDefault())
        {
            return;
        }

        if (vm.Id is not null)
        {
            await ItemsClient.DeleteItemOptionValueAsync(ItemId, Option.Id, vm.Id);
        }

        Values.Remove(vm);
    }

    async Task OnSubmit()
    {
        var data = new ApiUpdateItemOption
        {
            Name = Name,
            OptionType = OptionType,
            Description = Description,
            GroupId = Group?.Id,
            IsSelected = IsSelected,
            ItemId = Id,
            Price = Price,
            Values = Values.Select(x => new ApiUpdateItemOptionValue()
            {
                Id = x.Id,
                Name = x.Name,
                ItemId = x.Id,
                Price = x.Price
            }).ToList(),
            DefaultOptionValueId = SelectedValue?.Id
        };

        var result = await ItemsClient.UpdateItemOptionAsync(ItemId, Option.Id, data);
        Modal.Close(DialogResult.Ok(result));
    }

    public class OptionValueVM
    {
        public string Id { get; set; }

        [Required]
        public string Name { get; set; }

        public string? ItemId { get; set; }

        public decimal? Price { get; set; }
    }
}

