@page "/items/{itemId}/variants/new"

@using System.ComponentModel.DataAnnotations
@inject IItemsClient ItemsClient
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<AppPageTitle>Create variant</AppPageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" Class="mb-12">New variant</MudText>

<EditForm Model="@this" OnValidSubmit="OnSubmit">
    <ObjectGraphDataAnnotationsValidator />

    <MudGrid Spacing="6">
        <MudItem xs="12" sm="12" md="6" lg="6">
            <div class="card shadow-sm">
                @if (Src is not null)
                {
                    <MudImage Src="@Src" Alt="Mony the dog" Fluid="true" Elevation="25" Class="rounded-lg"
                    Style="width: 100%;" />
                }
                else
                {
                    <svg class="rounded-lg" width="100%" height="225" xmlns="http://www.w3.org/2000/svg" role="img"
                    aria-label="Placeholder: Thumbnail" preserveAspectRatio="xMidYMid slice" focusable="false">
                        <title>Placeholder</title>
                        <rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef"
                        dy=".3em">Thumbnail</text>
                    </svg>
                }
            </div>

            <InputFile id="fileInput" OnChange="UploadFiles" hidden accept="*.jpg, *.jpeg, *.png" />

            <MudButton HtmlTag="label" Color="Color.Secondary" StartIcon="@Icons.Filled.CloudUpload" for="fileInput">
                Upload image
            </MudButton>

        </MudItem>

        <MudItem xs="12" sm="12" md="6" lg="6">
            <MudPaper Elevation="25" Class="pa-4">

                <MudTextField Label="Name" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Name"
                    For="() => Name" />

                <MudTextField Lines="3" Class="mb-6" Label="Description" Variant="Variant.Outlined"
                    @bind-Value="Description" For="() => Description" />

                <MudTextField Label="Id" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Id" For="() => Id" />

                <MudNumericField Label="Price" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Price"
                    For="() => Price" />

            </MudPaper>

        </MudItem>

    </MudGrid>

    @if (Attributes is not null)
    {
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mt-6 mb-2">Attributes</MudText>

        <MudPaper Elevation="25" Class="mt-4 pa-4">

            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Attribute</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Attributes is not null)
                    {
                        @foreach (var attribute in Attributes.Where(x => x.ForVariant))
                        {
                            <tr>
                                <td>@(attribute.Name)</td>

                                @if (attribute.Values is not null)
                                {
                                    <td>
                                        <MudSelect T="AttributeValueDto" Class="mb-6" Variant="MudBlazor.Variant.Outlined"
                            @bind-Value="attribute.SelectedValue" ToStringFunc="x => x?.Name"
                            For="() => attribute.SelectedValue">
                                            @foreach (var item in attribute.Values)
                                            {
                                                <MudSelectItem Value="@item" />
                                            }
                                        </MudSelect>
                                    </td>
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </MudPaper>
    }

    <MudButton Class="mt-8" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary">Create</MudButton>
</EditForm>

@code {
    [Parameter] public string ItemId { get; set; }

    [Required]
    public string Name { get; set; }

    public string Description { get; set; }

    [Required]
    public string Id { get; set; }

    [Required]
    public decimal Price { get; set; }

    public List<AttributeVM> Attributes = new List<AttributeVM>();

    public string? Src => imageBytes is null ? null : $"data:image/png;base64,{Convert.ToBase64String(imageBytes)}";

    protected override async Task OnInitializedAsync()
    {
        var attributes = await ItemsClient.GetItemAttributesAsync(ItemId);
        foreach (var attribute in attributes)
        {
            var vm = new AttributeVM()
            {
                Id = attribute.Id,
                Name = attribute.Name,
                ForVariant = attribute.ForVariant
            };

            Attributes.Add(vm);

            vm.Values.AddRange(
            await ItemsClient.GetItemAttributeValuesAsync(ItemId, attribute.Id));

            vm.SelectedValue = vm.Values.FirstOrDefault();
        }
    }

    IBrowserFile? file;
    byte[]? imageBytes;

    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        int FileMaxSize = 1014 * 1000 * 3;
        file = e.File;
        var stream = e.File.OpenReadStream(FileMaxSize);
        await Process(stream);

        StateHasChanged();
    }

    private async Task Process(Stream stream)
    {
        var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        memoryStream.Seek(0, SeekOrigin.Begin);
        imageBytes = await GetBytes(memoryStream);
        memoryStream.Seek(0, SeekOrigin.Begin);
        Console.WriteLine(memoryStream.Length);
        //model.Stream = memoryStream;
    }

    private async Task<byte[]> GetBytes(MemoryStream memoryStream)
    {
        var imageBytes = memoryStream.ToArray();
        return imageBytes;
    }

    async Task OnSubmit()
    {
        var data = new ApiCreateItemVariant
        {
            Name = Name,
            Description = Description,
            Id = Id,
            Price = Price,
            Attributes = new List<ApiCreateItemVariantAttribute>()
        };

        foreach (var attribute in Attributes)
        {
            var attributeData = new ApiCreateItemVariantAttribute
            {
                OptionId = attribute.Id,
                ValueId = attribute.SelectedValue.Id
            };

            data.Attributes.Add(attributeData);
        }

        try
        {
            var result = await ItemsClient.CreateVariantAsync(ItemId, data);

            if (file is not null)
            {
                result.Image = await ItemsClient.UploadVariantImageAsync(ItemId, result.Id, new
                FileParameter(file.OpenReadStream(3 * 1000000), file.Name));
            }

            NavigationManager.NavigateTo($"/items/{ItemId}/edit");
        }
        catch (ApiException<ProblemDetails> exc)
        {
            Snackbar.Add(exc.Result.Detail, Severity.Error);
        }
    }

    public class AttributeVM
    {
        public string Id { get; set; }

        public string Name { get; set; }

        public AttributeValueDto SelectedValue { get; set; }

        public bool ForVariant { get; set; }

        public List<AttributeValueDto> Values { get; set; } = new List<AttributeValueDto>();
    }
}
