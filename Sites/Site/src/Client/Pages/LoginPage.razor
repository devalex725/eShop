@using Site.Client.Authentication
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization

@page "/login"
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject CartService CartService

<SitePageTitle>Login</SitePageTitle>

@if(loaded) 
{
    <div class="form-signin">
        <EditForm Model="@this" OnValidSubmit="Login">
            <DataAnnotationsValidator />

            <h1 class="h3 mb-3 fw-normal">Please sign in</h1>

            <div class="form-floating">
                <InputText class="form-control" @bind-Value="SSN"></InputText>
                <label for="floatingInput">SSN</label>
                <ValidationMessage For="() => SSN" />
            </div>

            @*<div class="checkbox mb-3">
                <label>
                    <input type="checkbox" value="remember-me"> Remember me
                </label>
            </div>*@

            <button class="w-100 btn btn-lg btn-primary mt-3" type="submit">Sign in</button>

            @if(unauthenticated) 
            {
                <span style="color: red">You are not a customer</span>
            }

        </EditForm>
    </div>
}

@code {
    bool unauthenticated = false;
    bool loaded = false;

    [Required]
    public string SSN { get; set; } = null!;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateTask;
        var user = authenticationState.User;

        if(user?.Identity is null) 
        {
            return;
        }

        if(user?.Identity?.IsAuthenticated ?? false)
        {
            NavigationManager.NavigateTo("/user/profile");

            return;
        }
        
        loaded = true;
    }

    public async Task Login()
    {
        unauthenticated = false;

        var result = await AuthenticationService.Login(new Site.Client.Authentication.UserForAuthenticationDto() { SSN = SSN });
        if(result.IsAuthSuccessful) 
        {
            await CartService.ReconnectAndReload();

            NavigationManager.NavigateTo("/user/profile");
        }
        else 
        {
            unauthenticated = true;
        }
    }
}

