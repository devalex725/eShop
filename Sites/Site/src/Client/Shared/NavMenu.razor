@using Microsoft.JSInterop
@implements IDisposable
@inject IJSRuntime JS
@inject IProductsClient ProductsClient
@inject PersistentComponentState ApplicationState

<nav class="navbar navbar-dark bg-brand fixed-top">
    <div class="container-fluid">
        <div>
            <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar"
                aria-controls="offcanvasNavbar">
                <span class="navbar-toggler-icon"></span>
            </button>
            <a class="navbar-brand ms-2" href="/">
            Your Brand
                @* <img src="/logo.png" class="ms-2 me-4" alt="Your Brand" /> *@
            </a>
        </div>
        <div class="offcanvas offcanvas-start text-bg-light" style="z-index: 99999;" tabindex="-1" id="offcanvasNavbar"
            aria-labelledby="offcanvasNavbarLabel">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="offcanvasNavbarLabel">
                    Your Brand
                    @*<img src="/logo.png" class="me-4"
                        alt="Your Brand" />*@
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="offcanvas-body">
                <ul class="navbar-nav justify-content-end flex-grow-1 pe-3">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="#" data-bs-dismiss="offcanvas">Home</a>
                    </li>
                    @if (productGroups is not null)
                    {
                        @foreach (var group in productGroups)
                        {
                            <li class="nav-item">
                                <NavLink class="nav-link" href="@($"groups/{group.Id}")" data-bs-dismiss="offcanvas">@group.Name
                                </NavLink>
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
        
        <div class="d-flex d-none d-lg-flex">
            <div class="me-4">
                <form class="d-flex" role="search" style="height: 80%;" @onclick:preventDefault
                    @onclick:stopPropagation>
                        <div class="input-group">
                            <input class="form-control border-end-0 border" type="search" placeholder="Find"
                                id="example-search-input">
                            <button class="btn btn-outline-secondary bg-white border-start-0 border-bottom-1 border ms-n5"
                                type="button">
                                <i class="fa fa-search"></i>
                            </button>
                        </div>
                </form>   
            </div>     
            <ul class="list-inline mb-0 mt-2">
                <li class="list-inline-item">
                    <LoginDisplay />
                </li>
                <li class="list-inline-item">
                    <a class="menu-link me-3 text-decoration-none text-uppercase">
                        <CartNavItem />
                    </a>
                </li>
            </ul>
        </div>


        <ul class="list-inline mb-0 d-inline-block d-lg-none">
            <li class="list-inline-item"> <a class="menu-link me-3 text-decoration-none text-uppercase" href="search">
                    <i class="fa fa-search"></i>
                </a></li>
    
            <li class="list-inline-item"> <a class="menu-link me-3 text-decoration-none text-uppercase"
                    href="user/profile">
                    <i class="fa fa-user"></i>
                </a></li>

            <li class="list-inline-item"><a class="menu-link me-3 text-decoration-none text-uppercase" href="#" @onclick:preventDefault>
                    <CartNavItem SmallIcon="true" />
                </a></li>
        </ul>
    </div>
</nav>

<CartOffCanvas />

@code {
    private PersistingComponentStateSubscription persistingSubscription;
    ICollection<ProductGroupDto>? productGroups = null;
    bool isOpen = false;

    void ToggleOpen() => isOpen = !isOpen;

    protected override async Task OnInitializedAsync()
    {

        persistingSubscription =
        ApplicationState.RegisterOnPersisting(PersistItems);

        if (!ApplicationState.TryTakeFromJson<ICollection<ProductGroupDto>>(
        "productGroups", out var restored))
        {
            productGroups = await ProductsClient.GetProductGroupsAsync(null, true);
        }
        else
        {
            productGroups = restored!;
        }
    }

    private Task PersistItems()
    {
        ApplicationState.PersistAsJson("productGroups", productGroups);

        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            /* await JS.InvokeVoidAsync(
            "initDropDown"); */
        }
    }

    public void Dispose()
    {
        persistingSubscription.Dispose();
    }
}