@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.Extensions.Configuration;
@inject NavigationManager NavigationManager
@inject CartService CartService
@inject Site.Client.RenderingContext RenderingContext
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService
@inject IConfiguration Configuration

<CartDisplay NoOfItems="@(cart?.Items.Sum(x => x.Quantity) ?? 0)" SmallIcon="true" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight" />

@code
{
    SiteCartDto? cart;
    static bool initialized;
    static bool inializing;

    [Parameter]
    public bool SmallIcon { get; set; }

    [Parameter]
    public bool DisableDropDown { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (RenderingContext.IsPrerendering)
            return;
        
        CartService.CartUpdated += OnCartUpdated;

        if (!initialized && !inializing)
        {
            inializing = true;

            var clientId = await LocalStorageService.GetItemAsync<string>("cid");    

            if(!CartService.IsConnected) 
            {
                await CartService.Reload();

                await CartService.Start(Configuration["StorefrontUri"], clientId);
                
                initialized = true;
                inializing = false;
            }
        }
    }

    private async Task OnCartUpdated()
    {
        if (RenderingContext.IsPrerendering)
            return;

        cart = CartService.Cart;

        await InvokeAsync(StateHasChanged);
    }

    public async Task DisposeAsync()
    {
        CartService.CartUpdated -= OnCartUpdated;

        await CartService.Stop();

        initialized = false;
    }
}