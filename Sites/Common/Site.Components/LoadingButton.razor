<button class="@($"btn btn-{(Variant is null ? null : $"{Variant}-")}{(_error ? ErrorColor : Color)}") @Class" type="button" disabled="@(Disabled || _processing)" @onclick="ProcessSomething">
    
    @if (_processing)
    {
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        @if(LoadingText is not null) 
        {
            <span class="ms-2">@LoadingText</span>
        }
    }
    else if(_error && !(ErrorText is null && ErrorIcon is null))
    {
        if(ErrorIcon is not null) 
        {
            <i class="fa fa-@(ErrorIcon)"></i>
        }
        if(ErrorText is not null) 
        {
            <span class="@(ErrorIcon is not null ? "ms-2" : string.Empty)">@ErrorText</span>
        }
    }
    else
    {
        if(Icon is not null) 
        {
            <i class="fa fa-@(Icon)"></i>

        }
        if(ChildContent is not null) 
        {
            <span class="@(Icon is not null ? "ms-2" : string.Empty)">@ChildContent</span>
        }
    }
</button>

@code {
    private bool _processing = false;
    private bool _error =  false;

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string? Icon { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public EventCallback OnClick { get; set; } = default!;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    [Parameter]
    public string? LoadingText { get; set; }

    [Parameter]
    public string? ErrorIcon { get; set; } = "circle-exclamation";

    [Parameter]
    public string? ErrorColor { get; set; } = "danger";

    [Parameter]
    public string? ErrorText { get; set; } = "Try again";

    [Parameter]
    public string Variant { get; set; } = default!;

    [Parameter]
    public string Color { get; set; } = "primary";

    [Parameter]
    public string Size { get; set; } = default!;

    [Parameter]
    public int Timeout { get; set; } = 600;

    public void Reset() 
    {
        _error = false;
    }

    public Func<Task> Decorate(Func<Task> handler)
    {
        return async () => await InvokeHandler(handler);
    }

    public async Task InvokeHandler(Func<Task> handler)
    {
        _error = false;
        
        CancellationTokenSource cts = new ();
        Task? t = null;

        try 
        {
            if(Timeout > 0) 
            {
                t = Task.Delay(Timeout).ContinueWith(async (task) => { 
                        _processing = true;
                        await InvokeAsync(StateHasChanged); 
                    }, cts.Token);
            }
            else
            {
                _processing = true;
            }

            await handler();
        }
        catch(TaskCanceledException)
        {
            
        }
        catch
        {
            _error = true;
        }
        finally 
        {
            cts.Cancel();
            _processing = false;
        }
    }

    async Task ProcessSomething()
    {
        await InvokeHandler(async () => {
            await OnClick.InvokeAsync();
        });
    }
}